{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/common/redux/encounter/encounterActions.ts","webpack:///./src/combat-sandbox-1/enums.ts","webpack:///./src/combat-sandbox-1/redux/actions/game-actions.ts","webpack:///./src/common/functions.ts","webpack:///./src/common/math/mathUtils.ts","webpack:///./src/combat-sandbox-1/components/encounter/EncounterSelection.tsx","webpack:///./src/combat-sandbox-1/components/encounter/EncounterStageText.tsx","webpack:///./src/common/model/encounter/EncounterStage.ts","webpack:///./src/common/model/encounter/ActiveEncounter.ts","webpack:///./src/combat-sandbox-1/Player.ts","webpack:///./src/common/encounter/encounterUtils.ts","webpack:///./src/combat-sandbox-1/components/encounter/ChoiceItemList/ChoiceItem.tsx","webpack:///./src/combat-sandbox-1/components/encounter/ChoiceItemList/ChoiceItemList.tsx","webpack:///./src/common/model/encounter/EncounterChoice.ts","webpack:///./src/combat-sandbox-1/components/encounter/choiceTypes/EndEncounterChoiceView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/choiceTypes/RollChoiceView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/stageTypes/PickedStateView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/stageTypes/ChoicesStageView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/StageTypeView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/EncounterStageView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/EncounterView.tsx","webpack:///./src/combat-sandbox-1/components/EncounterPanel/EncounterPanel.tsx","webpack:///./src/combat-sandbox-1/redux/actions/player-actions.ts","webpack:///./src/combat-sandbox-1/redux/reducers/player-reducer.ts","webpack:///./src/combat-sandbox-1/components/PlayerConfigPanel/PlayerConfigPanelInput.tsx","webpack:///./src/combat-sandbox-1/components/PlayerConfigPanel/PlayerConfigPanel.tsx","webpack:///./src/common/model/encounter/EncounterOutcome.ts","webpack:///./src/combat-sandbox-1/encounter1.ts","webpack:///./src/combat-sandbox-1/CombatSandbox1.tsx","webpack:///./src/common/redux/encounter/activeEncounterReducer.ts","webpack:///./src/common/redux/encounter/encounterByIdReducer.ts","webpack:///./src/common/redux/encounter/encounterReducer.ts","webpack:///./src/combat-sandbox-1/redux/reducers/current-scene-reducer.ts","webpack:///./src/combat-sandbox-1/redux/root-reducer.ts","webpack:///./src/combat-sandbox-1/redux/store.ts","webpack:///./src/combatSandbox1.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EncounterAction","Scene","GameActions","noop","args","dieCount","dieFaces","sum","randomInt","min","max","Math","floor","random","setScene","scene","type","SET_SCENE","payload","props","super","this","state","selectedEncounter","onSelectChange","onSelectEncounter","encounters","className","htmlFor","id","onChange","map","encounter","disabled","onClick","e","encounterId","currentTarget","find","setState","defaultProps","values","byId","dispatch","START","encounterStart","ENCOUNTER","EncounterStageText","text","EncounterStageType","StageState","RollState","RollOutcomeType","instanceOfChoicesStage","stage","CHOICE","Stat","statNames","STR","DEX","CON","WIS","INT","CHA","statAbbreviations","getRequiredStats","requirements","keys","ChoiceItem","player","choice","fixed","onSelect","every","stat","checkChoiceRequirements","requirementsText","stats","getStatAbbreviation","join","description","choices","ChoiceType","instanceofRollChoice","ROLL","EndEncounterChoiceView","ownProps","activeEncounter","active","END","ENCOUNTER_END","onContinue","continueText","cost","roll","encounterRoll","ROLL_CONTINUE","encounterRollContinue","rollState","INIT","onRoll","rolls","canContinue","rollCost","canRoll","willpower","rollCallback","statSum","reduce","rollSum","continueCallback","primary","getStatName","renderInitView","ROLLED","rollTotal","rollOutcomeType","rollOutcome","renderRolledView","PickedStateView","END_ENCOUNTER","instanceOfEndEncounterChoice","InitStateView","onChoiceSelect","ChoicesStageView","SELECT_CHOICE","encounterSelectChoice","StateView","PICKED","getStateView","stageState","StageTypeView","StageView","EncounterStageView","EncounterView","sceneTitles","ENCOUNTER_SELECT","currentScene","RESET","onReset","renderView","PlayerActions","setPlayer","SET_PLAYER","setStat","statName","SET_PLAYER_STAT","reducerMap","SET_PLAYER_DESCRIPTION","PlayerConfigPanelInput","label","maxWillpower","strength","dexterity","constitution","wisdom","intelligence","charisma","setDescription","Number","onPlayerReset","onNameChange","onStrengthChange","onDexterityChange","onConstitutionChange","onWisdomChange","onIntelligenceChange","onCharismaChange","onMaxWillpowerChange","onWillpowerChange","OutcomeType","encounter1","entryStage","stages","dc","outcomes","criticalSuccess","success","failure","criticalFailure","load","ConnectedCombatSandbox1","REGISTER","reducers","action","includes","newState","SET_STAGE_STATE","total","CRITICAL_SUCCESS","SUCCESS","CRITICAL_FAILURE","FAILURE","console","warn","encounterReducer","reducer","rootReducer","store","appRoot","document","getElementById"],"mappings":"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","file":"combatSandbox1.945bd3c632769a7826e2.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/slimes-the-game/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([46,3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Action } from 'redux';\r\nimport { Player } from '../../../combat-sandbox-1/Player';\r\nimport { PayloadAction } from '../../../combat-sandbox-1/redux/redux-utils';\r\nimport { roll } from '../../math/mathUtils';\r\nimport { StageState } from '../../model/encounter/ActiveEncounter';\r\nimport { Encounter } from '../../model/encounter/Encounter';\r\nimport { EncounterChoice } from '../../model/encounter/EncounterChoice';\r\n\r\nexport enum EncounterAction {\r\n    REGISTER = 'ENCOUNTER_REGISTER',\r\n    START = 'ENCOUNTER_START',\r\n    RESET = 'ENCOUNTER_RESET',\r\n    SELECT_CHOICE = 'ENCOUNTER_SELECT_CHOICE',\r\n    SET_STAGE_STATE = 'ENCOUNTER_SET_STAGE_STATE',\r\n    END = 'ENCOUNTER_END',\r\n    ROLL = 'ENCOUNTER_ROLL',\r\n    ROLL_CONTINUE = 'ENCOUNTER_ROLL_CONTINUE',\r\n}\r\n\r\nexport interface EncounterRollDef {\r\n    roll: number;\r\n    cost: number;\r\n}\r\n\r\nexport function encounterRegister(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterAction.REGISTER, payload: encounter };\r\n}\r\n\r\nexport function encounterStart(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterAction.START, payload: encounter };\r\n}\r\n\r\nexport function encounterReset(): Action {\r\n    return { type: EncounterAction.RESET };\r\n}\r\n\r\nexport function encounterSelectChoice(choice: EncounterChoice): PayloadAction<EncounterChoice> {\r\n    return { type: EncounterAction.SELECT_CHOICE, payload: choice };\r\n}\r\n\r\nexport function setStageState(state: StageState): PayloadAction<StageState> {\r\n    return { type: EncounterAction.SET_STAGE_STATE, payload: state };\r\n}\r\n\r\nexport function encounterEnd(): Action {\r\n    return { type: EncounterAction.END };\r\n}\r\n\r\nexport function encounterRoll(\r\n    cost: number,\r\n    dieFaces = 20,\r\n    dieCount = 1\r\n): PayloadAction<EncounterRollDef> {\r\n    return { type: EncounterAction.ROLL, payload: { roll: roll(dieCount, dieFaces), cost } };\r\n}\r\n\r\nexport function encounterRollContinue(player: Player): PayloadAction<Player> {\r\n    return { type: EncounterAction.ROLL_CONTINUE, payload: player };\r\n}\r\n","export enum Scene {\n    ENCOUNTER_SELECT = 'ENCOUNTER_SELECT',\n    ENCOUNTER = 'ENCOUNTER',\n    ENCOUNTER_END = 'ENCOUNTER_END',\n}\n","import { Scene } from '../../enums';\nimport { PayloadAction } from '../redux-utils';\n\nexport enum GameActions {\n    SET_SCENE = 'SET_SCENE',\n}\n\nexport function setScene(scene: Scene): PayloadAction<Scene> {\n    return { type: GameActions.SET_SCENE, payload: scene };\n}\n","export type Callback<T> = (t: T) => void;\n\nexport function noop(...args: any[]): void {\n    return;\n}\n","export function roll(dieCount: number, dieFaces: number): number {\r\n    let sum = 0;\r\n    for (let i = 0; i < dieCount; i++) {\r\n        sum += randomInt(1, dieFaces);\r\n    }\r\n    return sum;\r\n}\r\n\r\nexport function randomInt(min = 1, max = 6): number {\r\n    return min + Math.floor(Math.random() * (1 + max - min));\r\n}\r\n","import { Component, h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback, noop } from '../../../common/functions';\r\nimport { Encounter } from '../../../common/model/encounter/Encounter';\r\nimport { encounterStart } from '../../../common/redux/encounter/encounterActions';\r\nimport { Scene } from '../../enums';\r\nimport { setScene } from '../../redux/actions/game-actions';\r\nimport { State } from '../../redux/store';\r\nimport './EncounterSelection.scss';\r\nimport TargetedEvent = JSXInternal.TargetedEvent;\r\n\r\nexport interface EncounterSelectionProps {\r\n    encounters: Encounter[];\r\n    onSelectEncounter: Callback<Encounter>;\r\n}\r\n\r\nexport interface EncounterSelectionState {\r\n    selectedEncounter: Encounter;\r\n}\r\n\r\nexport class EncounterSelectionComponent extends Component<\r\n    EncounterSelectionProps,\r\n    EncounterSelectionState\r\n> {\r\n    public static defaultProps: Partial<EncounterSelectionProps> = {\r\n        encounters: [],\r\n        onSelectEncounter: noop,\r\n    };\r\n\r\n    public constructor(props: EncounterSelectionProps) {\r\n        super(props);\r\n        this.state = { selectedEncounter: null };\r\n        this.onSelectChange = this.onSelectChange.bind(this);\r\n        this.onSelectEncounter = this.onSelectEncounter.bind(this);\r\n    }\r\n\r\n    public render({ encounters }: EncounterSelectionProps): VNode {\r\n        return (\r\n            <div className=\"EncounterSelection\">\r\n                <section>\r\n                    <ul className=\"encounter-stats-list\">\r\n                        <li>\r\n                            <span className=\"key\">Encounters Available: </span>\r\n                            <span className=\"value\">{encounters.length}</span>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                <hr />\r\n                <section className=\"encounter-selection-form\">\r\n                    <label htmlFor=\"encounter-select\">\r\n                        <span>Select Encounter: </span>\r\n                        <select\r\n                            id=\"encounter-select\"\r\n                            value={this.state.selectedEncounter?.id}\r\n                            onChange={this.onSelectChange}\r\n                        >\r\n                            <option value=\"\" />\r\n                            {encounters.map((encounter) => (\r\n                                <option value={encounter.id}>{encounter.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n                    <button\r\n                        className=\"primary\"\r\n                        disabled={!this.state.selectedEncounter}\r\n                        onClick={this.onSelectEncounter}\r\n                    >\r\n                        Start Encounter\r\n                    </button>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSelectChange(e: TargetedEvent<HTMLSelectElement>): void {\r\n        const encounterId = e.currentTarget.value;\r\n        const encounter = this.props.encounters.find((e) => e.id === encounterId) ?? null;\r\n        this.setState({ selectedEncounter: encounter });\r\n    }\r\n\r\n    private onSelectEncounter(): void {\r\n        const { selectedEncounter } = this.state;\r\n        if (selectedEncounter) {\r\n            this.props.onSelectEncounter(selectedEncounter);\r\n        }\r\n    }\r\n}\r\n\r\nexport const EncounterSelection = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EncounterSelectionComponent as any);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterSelectionProps> {\r\n    return {\r\n        encounters: Object.values(state.encounter.byId),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EncounterSelectionProps> {\r\n    return {\r\n        onSelectEncounter(encounter: Encounter): void {\r\n            dispatch(encounterStart(encounter));\r\n            dispatch(setScene(Scene.ENCOUNTER));\r\n        },\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\n\r\nexport interface EncounterStageTextProps {\r\n    text: string[];\r\n}\r\n\r\nexport const EncounterStageText = ({ text }: EncounterStageTextProps): VNode => {\r\n    return (\r\n        <div className=\"EncounterStageText\">\r\n            {text.map((t) => (\r\n                <p>{t}</p>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n","import { WithId, WithText } from './Encounter';\r\nimport { EncounterChoice } from './EncounterChoice';\r\n\r\nexport enum EncounterStageType {\r\n    CHOICE = 'CHOICE',\r\n}\r\n\r\nexport interface EncounterStageBase extends WithId, WithText {\r\n    type: EncounterStageType;\r\n}\r\n\r\nexport interface ChoicesStage extends EncounterStageBase {\r\n    type: EncounterStageType.CHOICE;\r\n    choices: EncounterChoice[];\r\n}\r\n\r\nexport type EncounterStage = ChoicesStage;\r\n\r\nexport function instanceOfChoicesStage(stage: EncounterStage): stage is ChoicesStage {\r\n    return stage.type === EncounterStageType.CHOICE;\r\n}\r\n","import { Encounter } from './Encounter';\r\nimport { EncounterChoice } from './EncounterChoice';\r\nimport { EncounterOutcome } from './EncounterOutcome';\r\nimport { EncounterStage } from './EncounterStage';\r\n\r\nexport enum StageState {\r\n    INIT = 'INIT',\r\n    PICKED = 'PICKED',\r\n}\r\n\r\nexport enum RollState {\r\n    INIT = 'INIT',\r\n    ROLLED = 'ROLLED',\r\n}\r\n\r\nexport enum RollOutcomeType {\r\n    CRITICAL_SUCCESS = 'Critical Success',\r\n    SUCCESS = 'Success',\r\n    FAILURE = 'Failure',\r\n    CRITICAL_FAILURE = 'Critical Failure',\r\n}\r\n\r\nexport interface ActiveEncounter {\r\n    encounter: Encounter;\r\n    stage: EncounterStage;\r\n    stageState: StageState;\r\n    choice?: EncounterChoice;\r\n    rolls?: number[];\r\n    rollState?: RollState;\r\n    rollOutcome?: EncounterOutcome;\r\n    rollOutcomeType?: RollOutcomeType;\r\n    rollTotal?: number;\r\n}\r\n","export enum Stat {\r\n    STR = 'strength',\r\n    DEX = 'dexterity',\r\n    CON = 'constitution',\r\n    WIS = 'wisdom',\r\n    INT = 'intelligence',\r\n    CHA = 'charisma',\r\n}\r\n\r\nexport interface PlayerStats {\r\n    maxWillpower: number;\r\n    willpower: number;\r\n    strength: number;\r\n    dexterity: number;\r\n    constitution: number;\r\n    wisdom: number;\r\n    intelligence: number;\r\n    charisma: number;\r\n}\r\n\r\nexport interface PlayerDescription {\r\n    name: string;\r\n}\r\n\r\nexport interface Player extends PlayerDescription, PlayerStats {}\r\n","import { Player, Stat } from '../../combat-sandbox-1/Player';\r\nimport { EncounterChoice } from '../model/encounter/EncounterChoice';\r\n\r\nconst statNames: Record<Stat, string> = {\r\n    [Stat.STR]: 'Strength',\r\n    [Stat.DEX]: 'Dexterity',\r\n    [Stat.CON]: 'Constitution',\r\n    [Stat.WIS]: 'Wisdom',\r\n    [Stat.INT]: 'Intelligence',\r\n    [Stat.CHA]: 'Charisma',\r\n};\r\nconst statAbbreviations: Record<Stat, string> = {\r\n    [Stat.STR]: 'STR',\r\n    [Stat.DEX]: 'DEX',\r\n    [Stat.CON]: 'CON',\r\n    [Stat.WIS]: 'WIS',\r\n    [Stat.INT]: 'INT',\r\n    [Stat.CHA]: 'CHA',\r\n};\r\n\r\nexport function getRequiredStats({ requirements }: EncounterChoice): Stat[] {\r\n    return Object.keys(requirements) as Stat[];\r\n}\r\n\r\nexport function checkChoiceRequirements(player: Player, choice: EncounterChoice): boolean {\r\n    if (!choice.requirements) return true;\r\n    const stats = getRequiredStats(choice);\r\n    return stats.every((stat) => player[stat] >= choice.requirements[stat]);\r\n}\r\n\r\nexport function getStatName(stat: Stat): string {\r\n    return statNames[stat];\r\n}\r\n\r\nexport function getStatAbbreviation(stat: Stat): string {\r\n    return statAbbreviations[stat];\r\n}\r\n","import classNames from 'classnames';\r\nimport { h, VNode } from 'preact';\r\nimport { useCallback } from 'preact/hooks';\r\nimport {\r\n    checkChoiceRequirements,\r\n    getRequiredStats,\r\n    getStatAbbreviation,\r\n} from '../../../../common/encounter/encounterUtils';\r\nimport { Callback, noop } from '../../../../common/functions';\r\nimport { EncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { Player } from '../../../Player';\r\n\r\nexport interface ChoiceItemProps<C extends EncounterChoice> {\r\n    player: Player;\r\n    choice: C;\r\n    onSelect: Callback<C>;\r\n    fixed?: boolean;\r\n}\r\n\r\nexport const ChoiceItem = (props: ChoiceItemProps<EncounterChoice>): VNode => {\r\n    const { player, choice, fixed } = props;\r\n    let { onSelect } = props;\r\n    const disabled = !checkChoiceRequirements(player, choice);\r\n    if (disabled || typeof onSelect !== 'function') {\r\n        onSelect = noop;\r\n    }\r\n\r\n    const onClick = useCallback(() => onSelect(choice), [choice]);\r\n    let requirementsText = '';\r\n    if (choice.requirements) {\r\n        const stats = getRequiredStats(choice);\r\n        if (stats.length) {\r\n            requirementsText = stats\r\n                .map((stat) => `${choice.requirements[stat]} ${getStatAbbreviation(stat)}`)\r\n                .join(', ');\r\n            requirementsText = `[${requirementsText}]`;\r\n        }\r\n    }\r\n    return (\r\n        <li\r\n            className={classNames([\r\n                'ChoiceItem',\r\n                'EndEncounterChoiceItem',\r\n                {\r\n                    fixed: !!fixed,\r\n                    disabled,\r\n                },\r\n            ])}\r\n            onClick={onClick}\r\n        >\r\n            <span className=\"requirements\">{requirementsText} </span>\r\n            <span>{choice.description}</span>\r\n        </li>\r\n    );\r\n};\r\n","import { h, VNode } from 'preact';\r\nimport { Callback } from '../../../../common/functions';\r\nimport { EncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { Player } from '../../../Player';\r\nimport { ChoiceItem } from './ChoiceItem';\r\nimport './ChoiceItemList.scss';\r\n\r\nexport interface ChoiceItemListProps {\r\n    player: Player;\r\n    choices: EncounterChoice[];\r\n    onSelect?: Callback<EncounterChoice>;\r\n    fixed?: boolean;\r\n}\r\n\r\nexport const ChoiceItemList = ({\r\n    player,\r\n    choices,\r\n    onSelect,\r\n    fixed,\r\n}: ChoiceItemListProps): VNode => (\r\n    <ul className=\"ChoiceItemList\">\r\n        {choices.map((choice) => (\r\n            <ChoiceItem player={player} choice={choice} onSelect={onSelect} fixed={fixed} />\r\n        ))}\r\n    </ul>\r\n);\r\n","import { Stat } from '../../../combat-sandbox-1/Player';\r\nimport { WithText } from './Encounter';\r\nimport { EncounterOutcome } from './EncounterOutcome';\r\n\r\nexport enum ChoiceType {\r\n    END_ENCOUNTER = 'END_ENCOUNTER',\r\n    ROLL = 'ROLL',\r\n}\r\n\r\nexport type ChoiceRequirements = Partial<Record<Stat, number>>;\r\n\r\nexport interface EncounterChoiceBase {\r\n    type: ChoiceType;\r\n    description: string;\r\n    requirements?: ChoiceRequirements;\r\n}\r\n\r\nexport interface EndEncounterChoice extends EncounterChoiceBase, WithText {\r\n    type: ChoiceType.END_ENCOUNTER;\r\n    continueText: string;\r\n}\r\n\r\nexport interface RollChoice extends EncounterChoiceBase {\r\n    type: ChoiceType.ROLL;\r\n    dc: number;\r\n    outcomes: {\r\n        criticalSuccess?: EncounterOutcome;\r\n        success: EncounterOutcome;\r\n        failure: EncounterOutcome;\r\n        criticalFailure?: EncounterOutcome;\r\n    };\r\n}\r\n\r\nexport type EncounterChoice = EndEncounterChoice | RollChoice;\r\n\r\nexport function instanceOfEndEncounterChoice(\r\n    choice: EncounterChoice\r\n): choice is EndEncounterChoice {\r\n    return choice.type === ChoiceType.END_ENCOUNTER;\r\n}\r\n\r\nexport function instanceofRollChoice(choice: EncounterChoice): choice is RollChoice {\r\n    return choice.type === ChoiceType.ROLL;\r\n}\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { ActiveEncounter } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport { EndEncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport { encounterEnd } from '../../../../common/redux/encounter/encounterActions';\r\nimport { Scene } from '../../../enums';\r\nimport { Player } from '../../../Player';\r\nimport { setScene } from '../../../redux/actions/game-actions';\r\nimport { State } from '../../../redux/store';\r\nimport { ChoiceItemList } from '../ChoiceItemList/ChoiceItemList';\r\n\r\nexport interface EndEncounterChoiceViewWrapperProps {\r\n    stage: ChoicesStage;\r\n    choice: EndEncounterChoice;\r\n}\r\n\r\nexport interface EndEncounterChoiceViewProps extends EndEncounterChoiceViewWrapperProps {\r\n    player: Player;\r\n    activeEncounter: ActiveEncounter;\r\n    onContinue: () => void;\r\n}\r\n\r\nconst render = ({ player, choice, onContinue }: EndEncounterChoiceViewProps): VNode => (\r\n    <div className=\"EndEncounterChoiceView\">\r\n        <ChoiceItemList player={player} choices={[choice]} fixed />\r\n        {choice.text.map((t) => (\r\n            <p>{t}</p>\r\n        ))}\r\n        <button className=\"primary\" onClick={onContinue}>\r\n            {choice.continueText}\r\n        </button>\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(\r\n    state: State,\r\n    ownProps: EndEncounterChoiceViewWrapperProps\r\n): Partial<EndEncounterChoiceViewProps> {\r\n    return {\r\n        ...ownProps,\r\n        player: state.player,\r\n        activeEncounter: state.encounter.active,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EndEncounterChoiceViewProps> {\r\n    return {\r\n        onContinue(): void {\r\n            dispatch(encounterEnd());\r\n            dispatch(setScene(Scene.ENCOUNTER_END));\r\n        },\r\n    };\r\n}\r\n\r\nexport const EndEncounterChoiceView = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import classNames from 'classnames';\r\nimport { h, VNode } from 'preact';\r\nimport { useCallback } from 'preact/hooks';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { getRequiredStats, getStatName } from '../../../../common/encounter/encounterUtils';\r\nimport { Callback } from '../../../../common/functions';\r\nimport { ActiveEncounter, RollState } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport { RollChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport {\r\n    encounterRoll,\r\n    encounterRollContinue,\r\n} from '../../../../common/redux/encounter/encounterActions';\r\nimport { Player } from '../../../Player';\r\nimport { State } from '../../../redux/store';\r\nimport { ChoiceItemList } from '../ChoiceItemList/ChoiceItemList';\r\nimport './RollChoiceView.scss';\r\n\r\nexport interface RollChoiceViewWrapperProps {\r\n    stage: ChoicesStage;\r\n    choice: RollChoice;\r\n}\r\n\r\nexport interface RollChoiceViewProps extends RollChoiceViewWrapperProps {\r\n    player: Player;\r\n    activeEncounter: ActiveEncounter;\r\n    onRoll: Callback<number>;\r\n    onContinue: Callback<Player>;\r\n}\r\n\r\nconst renderInitView = ({\r\n    player,\r\n    activeEncounter,\r\n    choice,\r\n    onRoll,\r\n    onContinue,\r\n}: RollChoiceViewProps): VNode => {\r\n    const rolls = activeEncounter.rolls ?? [];\r\n    const canContinue = !!rolls.length;\r\n    const rollCost = rolls.length ? 1 : 0;\r\n    const canRoll = !rolls.length || player.willpower > 0;\r\n    const rollCallback = useCallback(() => onRoll(rollCost), [rollCost]);\r\n    const stats = getRequiredStats(choice);\r\n    const statSum = stats.reduce((s, stat) => s + choice.requirements[stat], 0);\r\n    const rollSum = rolls.reduce((s, roll) => s + roll, 0);\r\n    const continueCallback = useCallback(() => onContinue(player), [player]);\r\n    return (\r\n        <div className=\"RollChoiceView\">\r\n            <ChoiceItemList player={player} choices={[choice]} fixed />\r\n            <div className=\"buttons\">\r\n                {canContinue && (\r\n                    <button className=\"primary\" onClick={continueCallback}>\r\n                        Continue\r\n                    </button>\r\n                )}\r\n                <button\r\n                    className={classNames({ primary: !rollCost })}\r\n                    disabled={!canRoll}\r\n                    onClick={rollCallback}\r\n                >\r\n                    {`Roll${rollCost ? ' [1 WIL]' : ''}`}\r\n                </button>\r\n            </div>\r\n            <table className=\"roll-table\">\r\n                <tbody>\r\n                    {stats.map((stat) => (\r\n                        <tr>\r\n                            <th>{getStatName(stat)}</th>\r\n                            <td>{choice.requirements[stat]}</td>\r\n                        </tr>\r\n                    ))}\r\n                    {rolls.map((roll, i) => (\r\n                        <tr>\r\n                            <th>Roll {i + 1}</th>\r\n                            <td>{roll}</td>\r\n                        </tr>\r\n                    ))}\r\n                    <tr className=\"sum-row\">\r\n                        <th>Total</th>\r\n                        <td>{statSum + rollSum}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst renderRolledView = ({ player, activeEncounter, choice }: RollChoiceViewProps): VNode => {\r\n    return (\r\n        <div className=\"RollChoiceView\">\r\n            <ChoiceItemList player={player} choices={[choice]} fixed />\r\n            <table className=\"roll-table\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>Your Roll:</th>\r\n                        <td>{activeEncounter.rollTotal}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Outcome:</th>\r\n                        <td>{activeEncounter.rollOutcomeType}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            {activeEncounter.rollOutcome.text.map((t) => (\r\n                <p>{t}</p>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst render = (props: RollChoiceViewProps): VNode => {\r\n    switch (props.activeEncounter.rollState) {\r\n        case RollState.INIT:\r\n            return renderInitView(props);\r\n        case RollState.ROLLED:\r\n            return renderRolledView(props);\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\nfunction mapStateToProps(\r\n    state: State,\r\n    ownProps: RollChoiceViewWrapperProps\r\n): Partial<RollChoiceViewProps> {\r\n    return {\r\n        ...ownProps,\r\n        player: state.player,\r\n        activeEncounter: state.encounter.active,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<RollChoiceViewProps> {\r\n    return {\r\n        onRoll(cost): void {\r\n            dispatch(encounterRoll(cost));\r\n        },\r\n        onContinue(player: Player): void {\r\n            dispatch(encounterRollContinue(player));\r\n        },\r\n    };\r\n}\r\n\r\nexport const RollChoiceView = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { ActiveEncounter } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport {\r\n    instanceOfEndEncounterChoice,\r\n    instanceofRollChoice,\r\n} from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport { EndEncounterChoiceView } from '../choiceTypes/EndEncounterChoiceView';\r\nimport { RollChoiceView } from '../choiceTypes/RollChoiceView';\r\n\r\nexport interface PickedStateViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n    stage: ChoicesStage;\r\n}\r\n\r\nexport const PickedStateView = ({ activeEncounter, stage }: PickedStateViewProps): VNode => {\r\n    const { choice } = activeEncounter;\r\n    if (instanceOfEndEncounterChoice(choice)) {\r\n        return <EndEncounterChoiceView stage={stage} choice={choice} />;\r\n    } else if (instanceofRollChoice(choice)) {\r\n        return <RollChoiceView stage={stage} choice={choice} />;\r\n    }\r\n    return <div>PickedStateView</div>;\r\n};\r\n","import { ComponentType, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback } from '../../../../common/functions';\r\nimport { ActiveEncounter, StageState } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport { EncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport { encounterSelectChoice } from '../../../../common/redux/encounter/encounterActions';\r\nimport { Player } from '../../../Player';\r\nimport { State } from '../../../redux/store';\r\nimport { ChoiceItemList } from '../ChoiceItemList/ChoiceItemList';\r\nimport { PickedStateView } from './PickedStateView';\r\n\r\nexport interface ChoicesStageViewProps {\r\n    player: Player;\r\n    activeEncounter: ActiveEncounter;\r\n    stage: ChoicesStage;\r\n    onChoiceSelect?: Callback<EncounterChoice>;\r\n}\r\n\r\nconst InitStateView = ({ player, stage, onChoiceSelect }: ChoicesStageViewProps): VNode => (\r\n    <ChoiceItemList player={player} choices={stage.choices} onSelect={onChoiceSelect} />\r\n);\r\n\r\nfunction getStateView(state: StageState): ComponentType<ChoicesStageViewProps> {\r\n    switch (state) {\r\n        case StageState.INIT:\r\n            return InitStateView;\r\n        case StageState.PICKED:\r\n            return PickedStateView;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nconst render = (props: ChoicesStageViewProps) => {\r\n    const { activeEncounter } = props;\r\n    const StateView = getStateView(activeEncounter.stageState);\r\n    return (\r\n        <div className=\"ChoicesStageView\">\r\n            <StateView {...props} />\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: State): Partial<ChoicesStageViewProps> {\r\n    return {\r\n        player: state.player,\r\n        activeEncounter: state.encounter.active,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<ChoicesStageViewProps> {\r\n    return {\r\n        onChoiceSelect(choice: EncounterChoice): void {\r\n            dispatch(encounterSelectChoice(choice));\r\n        },\r\n    };\r\n}\r\n\r\nexport const ChoicesStageView = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import { ComponentType, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { ActiveEncounter } from '../../../common/model/encounter/ActiveEncounter';\r\nimport {\r\n    EncounterStage,\r\n    instanceOfChoicesStage,\r\n} from '../../../common/model/encounter/EncounterStage';\r\nimport { State } from '../../redux/store';\r\nimport { ChoicesStageView } from './stageTypes/ChoicesStageView';\r\n\r\nexport interface StageTypeViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n}\r\n\r\nexport interface StageViewProps<S extends EncounterStage> {\r\n    stage: S;\r\n}\r\n\r\nfunction getStageView<S extends EncounterStage>(\r\n    stage: EncounterStage\r\n): ComponentType<StageViewProps<S>> {\r\n    if (instanceOfChoicesStage(stage)) return ChoicesStageView;\r\n    return null;\r\n}\r\n\r\nconst render = ({ activeEncounter }: StageTypeViewProps): VNode => {\r\n    const StageView = getStageView(activeEncounter.stage);\r\n    return StageView ? <StageView stage={activeEncounter.stage} /> : null;\r\n};\r\n\r\nfunction mapStateToProps(state: State): Partial<StageTypeViewProps> {\r\n    return { activeEncounter: state.encounter.active };\r\n}\r\n\r\nexport const StageTypeView = connect(mapStateToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { ActiveEncounter } from '../../../common/model/encounter/ActiveEncounter';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterStageText } from './EncounterStageText';\r\nimport { StageTypeView } from './StageTypeView';\r\n\r\nexport interface EncounterStageViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n}\r\n\r\nconst render = ({ activeEncounter }: EncounterStageViewProps): VNode => (\r\n    <div className=\"EncounterStageView\">\r\n        <EncounterStageText text={activeEncounter.stage.text} />\r\n        <hr />\r\n        <StageTypeView />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterStageViewProps> {\r\n    return { activeEncounter: state.encounter.active };\r\n}\r\n\r\nexport const EncounterStageView = connect(mapStateToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterStageView } from './EncounterStageView';\r\n\r\nexport interface EncounterViewProps {}\r\n\r\nconst render = (props: EncounterViewProps): VNode => (\r\n    <div className=\"EncounterView\">\r\n        <EncounterStageView />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterViewProps> {\r\n    return {};\r\n}\r\n\r\nexport const EncounterView = connect(mapStateToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { encounterReset } from '../../../common/redux/encounter/encounterActions';\r\nimport { Scene } from '../../enums';\r\nimport { setScene } from '../../redux/actions/game-actions';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterSelection } from '../encounter/EncounterSelection';\r\nimport { EncounterView } from '../encounter/EncounterView';\r\nimport './EncounterPanel.scss';\r\n\r\nconst sceneTitles: Record<Scene, string> = {\r\n    [Scene.ENCOUNTER_SELECT]: 'Encounter Selection',\r\n    [Scene.ENCOUNTER]: 'Encounter Preview',\r\n    [Scene.ENCOUNTER_END]: 'Encounter Complete',\r\n};\r\n\r\nexport interface EncounterPanelProps {\r\n    currentScene: Scene;\r\n    onReset(): void;\r\n}\r\n\r\nconst renderView = (currentScene: Scene, onReset: () => void): VNode => {\r\n    switch (currentScene) {\r\n        case Scene.ENCOUNTER_SELECT:\r\n            return <EncounterSelection />;\r\n        case Scene.ENCOUNTER:\r\n            return <EncounterView />;\r\n        case Scene.ENCOUNTER_END:\r\n            return (\r\n                <div>\r\n                    <p>Congratulations! You finished the encounter!</p>\r\n                    <button className=\"primary\" onClick={onReset}>\r\n                        Start again?\r\n                    </button>\r\n                </div>\r\n            );\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\nexport const EncounterPanel = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(\r\n    ({ currentScene, onReset }: EncounterPanelProps): VNode => {\r\n        return (\r\n            <div className=\"EncounterPanel\">\r\n                <h3 className=\"header-with-buttons\">\r\n                    <span>{sceneTitles[currentScene]}</span>\r\n                    <button onClick={onReset} disabled={currentScene === Scene.ENCOUNTER_SELECT}>\r\n                        Reset\r\n                    </button>\r\n                </h3>\r\n                {renderView(currentScene, onReset)}\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nfunction mapStateToProps({ currentScene }: State): Partial<EncounterPanelProps> {\r\n    return { currentScene };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EncounterPanelProps> {\r\n    return {\r\n        onReset() {\r\n            dispatch(encounterReset());\r\n            dispatch(setScene(Scene.ENCOUNTER_SELECT));\r\n        },\r\n    };\r\n}\r\n","import { Player, PlayerDescription, PlayerStats } from '../../Player';\nimport { PayloadAction } from '../redux-utils';\n\nexport enum PlayerActions {\n    SET_PLAYER = 'SET_PLAYER',\n    SET_PLAYER_DESCRIPTION = 'SET_PLAYER_DESCRIPTION',\n    SET_PLAYER_STAT = 'SET_PLAYER_STAT',\n}\n\nexport interface PlayerStatUpdate {\n    statName: keyof PlayerStats;\n    value: number;\n}\n\nexport interface PlayerDescriptionUpdate {\n    key: keyof PlayerDescription;\n    value: string;\n}\n\nexport function setPlayer(player: Player): PayloadAction<Player> {\n    return { type: PlayerActions.SET_PLAYER, payload: player };\n}\n\nexport function setDescription(\n    key: keyof PlayerDescription,\n    value: string\n): PayloadAction<PlayerDescriptionUpdate> {\n    return {\n        type: PlayerActions.SET_PLAYER_DESCRIPTION,\n        payload: { key, value },\n    };\n}\n\nexport function setStat(\n    statName: keyof PlayerStats,\n    value: number\n): PayloadAction<PlayerStatUpdate> {\n    return {\n        type: PlayerActions.SET_PLAYER_STAT,\n        payload: { statName, value },\n    };\n}\n","import { Action, Reducer } from 'redux';\r\nimport {\r\n    EncounterAction,\r\n    EncounterRollDef,\r\n} from '../../../common/redux/encounter/encounterActions';\r\nimport { Player } from '../../Player';\r\nimport {\r\n    PlayerActions,\r\n    PlayerDescriptionUpdate,\r\n    PlayerStatUpdate,\r\n} from '../actions/player-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducerMap: Record<string, Reducer<Player>> = {\r\n    [PlayerActions.SET_PLAYER]: setPlayerReducer,\r\n    [PlayerActions.SET_PLAYER_DESCRIPTION]: setPlayerDescriptionReducer,\r\n    [PlayerActions.SET_PLAYER_STAT]: setPlayerStatReducer,\r\n    [EncounterAction.ROLL]: encounterRollReducer,\r\n};\r\n\r\nexport function playerReducer(player = defaultPlayer(), action: Action): Player {\r\n    const reducer = reducerMap[action.type];\r\n    return reducer ? reducer(player, action) : player;\r\n}\r\n\r\nexport function defaultPlayer(): Player {\r\n    return {\r\n        name: 'Firecrotch',\r\n        maxWillpower: 10,\r\n        willpower: 10,\r\n        strength: 2,\r\n        dexterity: 2,\r\n        constitution: 2,\r\n        wisdom: 2,\r\n        intelligence: 2,\r\n        charisma: 2,\r\n    };\r\n}\r\n\r\nfunction setPlayerReducer(player: Player, { payload }: PayloadAction<Player>): Player {\r\n    if (payload === player) {\r\n        return player;\r\n    }\r\n    return { ...payload };\r\n}\r\n\r\nfunction setPlayerDescriptionReducer(\r\n    player: Player,\r\n    { payload: { key, value } }: PayloadAction<PlayerDescriptionUpdate>\r\n): Player {\r\n    if (player[key] === value) {\r\n        return player;\r\n    }\r\n    return { ...player, [key]: value };\r\n}\r\n\r\nfunction setPlayerStatReducer(\r\n    player: Player,\r\n    { payload: { statName, value } }: PayloadAction<PlayerStatUpdate>\r\n): Player {\r\n    if (player[statName] === value) {\r\n        return player;\r\n    }\r\n    return { ...player, [statName]: value };\r\n}\r\n\r\nfunction encounterRollReducer(\r\n    player: Player,\r\n    { payload }: PayloadAction<EncounterRollDef>\r\n): Player {\r\n    if (!payload || !payload.cost) {\r\n        return player;\r\n    }\r\n    return {\r\n        ...player,\r\n        willpower: player.willpower - payload.cost,\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport HTMLAttributes = JSXInternal.HTMLAttributes;\r\n\r\nexport interface PlayerConfigPanelInputProps<T> extends HTMLAttributes<HTMLInputElement> {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport const PlayerConfigPanelInput = <T extends unknown>(\r\n    props: PlayerConfigPanelInputProps<T>\r\n): VNode => (\r\n    <label htmlFor={props.id}>\r\n        <span>{props.label}:</span>\r\n        <input {...props} />\r\n    </label>\r\n);\r\n","import { h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback } from '../../../common/functions';\r\nimport { Player } from '../../Player';\r\nimport { setDescription, setPlayer, setStat } from '../../redux/actions/player-actions';\r\nimport { defaultPlayer } from '../../redux/reducers/player-reducer';\r\nimport { State } from '../../redux/store';\r\nimport './PlayerConfigPanel.scss';\r\nimport { PlayerConfigPanelInput } from './PlayerConfigPanelInput';\r\nimport TargetedEvent = JSXInternal.TargetedEvent;\r\n\r\nexport interface PlayerConfigPanelProps {\r\n    player: Player;\r\n    onPlayerReset: () => void;\r\n    onNameChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onStrengthChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onDexterityChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onConstitutionChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onWisdomChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onIntelligenceChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onCharismaChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onMaxWillpowerChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onWillpowerChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n}\r\n\r\nconst render = ({\r\n    player,\r\n    onPlayerReset,\r\n    onNameChange,\r\n    onStrengthChange,\r\n    onDexterityChange,\r\n    onConstitutionChange,\r\n    onWisdomChange,\r\n    onIntelligenceChange,\r\n    onCharismaChange,\r\n    onMaxWillpowerChange,\r\n    onWillpowerChange,\r\n}: PlayerConfigPanelProps): VNode => (\r\n    <div className=\"PlayerConfigPanel\">\r\n        <h3 className=\"header-with-buttons\">\r\n            <span>Player</span>\r\n            <button onClick={onPlayerReset}>Reset</button>\r\n        </h3>\r\n        <PlayerConfigPanelInput\r\n            id=\"name-input\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            value={player.name}\r\n            onChange={onNameChange}\r\n        />\r\n        <h4>Attributes</h4>\r\n        <div className=\"attribute-config\">\r\n            <PlayerConfigPanelInput\r\n                id=\"strength-input\"\r\n                label=\"Strength\"\r\n                type=\"number\"\r\n                value={player.strength}\r\n                min={1}\r\n                onChange={onStrengthChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"dexterity-input\"\r\n                label=\"Dexterity\"\r\n                type=\"number\"\r\n                value={player.dexterity}\r\n                min={1}\r\n                onChange={onDexterityChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"constitution-input\"\r\n                label=\"Constitution\"\r\n                type=\"number\"\r\n                value={player.constitution}\r\n                min={1}\r\n                onChange={onConstitutionChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"wisdom-input\"\r\n                label=\"Wisdom\"\r\n                type=\"number\"\r\n                value={player.wisdom}\r\n                min={1}\r\n                onChange={onWisdomChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"intelligence-input\"\r\n                label=\"Intelligence\"\r\n                type=\"number\"\r\n                value={player.intelligence}\r\n                min={1}\r\n                onChange={onIntelligenceChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"charisma-input\"\r\n                label=\"Charisma\"\r\n                type=\"number\"\r\n                value={player.charisma}\r\n                min={1}\r\n                onChange={onCharismaChange}\r\n            />\r\n        </div>\r\n        <hr />\r\n        <h4>Resources</h4>\r\n        <PlayerConfigPanelInput\r\n            id=\"max-willpower-input\"\r\n            label=\"Max Willpower\"\r\n            type=\"number\"\r\n            value={player.maxWillpower}\r\n            min={1}\r\n            onChange={onMaxWillpowerChange}\r\n        />\r\n        <PlayerConfigPanelInput\r\n            id=\"willpower-input\"\r\n            label=\"Willpower\"\r\n            type=\"number\"\r\n            value={player.willpower}\r\n            min={0}\r\n            max={player.maxWillpower}\r\n            onChange={onWillpowerChange}\r\n        />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<PlayerConfigPanelProps> {\r\n    return {\r\n        player: state.player,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<PlayerConfigPanelProps> {\r\n    return {\r\n        onPlayerReset(): void {\r\n            dispatch(setPlayer(defaultPlayer()));\r\n        },\r\n        onNameChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = e.currentTarget.value;\r\n            dispatch(setDescription('name', value));\r\n        },\r\n        onStrengthChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('strength', value));\r\n        },\r\n        onDexterityChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('dexterity', value));\r\n        },\r\n        onConstitutionChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('constitution', value));\r\n        },\r\n        onWisdomChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('wisdom', value));\r\n        },\r\n        onIntelligenceChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('intelligence', value));\r\n        },\r\n        onCharismaChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('charisma', value));\r\n        },\r\n        onMaxWillpowerChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('maxWillpower', value));\r\n        },\r\n        onWillpowerChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('willpower', value));\r\n        },\r\n    };\r\n}\r\n\r\nexport const PlayerConfigPanel = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import { WithText } from './Encounter';\r\n\r\nexport enum OutcomeType {\r\n    NEXT_STAGE = 'NEXT_STAGE',\r\n    END_ENCOUNTER = 'END_ENCOUNTER',\r\n}\r\n\r\nexport interface EncounterOutcomeBase extends WithText {\r\n    type: OutcomeType;\r\n}\r\n\r\nexport interface NextStageOutcome extends EncounterOutcomeBase {\r\n    type: OutcomeType.NEXT_STAGE;\r\n    nextStageId: string;\r\n}\r\n\r\nexport interface EndEncounterOutcome extends EncounterOutcomeBase {\r\n    type: OutcomeType.END_ENCOUNTER;\r\n}\r\n\r\nexport type EncounterOutcome = NextStageOutcome | EndEncounterOutcome;\r\n\r\nexport function instanceOfNextStageOutcome(outcome: EncounterOutcome): outcome is NextStageOutcome {\r\n    return outcome.type === OutcomeType.NEXT_STAGE;\r\n}\r\n\r\nexport function instanceOfEndEncounterOutcome(\r\n    outcome: EncounterOutcome\r\n): outcome is EndEncounterOutcome {\r\n    return outcome.type === OutcomeType.END_ENCOUNTER;\r\n}\r\n","import { Encounter } from '../common/model/encounter/Encounter';\r\nimport { ChoiceType } from '../common/model/encounter/EncounterChoice';\r\nimport { OutcomeType } from '../common/model/encounter/EncounterOutcome';\r\nimport { EncounterStageType } from '../common/model/encounter/EncounterStage';\r\nimport { Stat } from './Player';\r\n\r\nexport const encounter1: Encounter = {\r\n    id: '0d895b71-0029-4e82-9a20-ce883e891660',\r\n    name: 'An Old Chest',\r\n    entryStage: 'c0704d17-9746-489b-a3eb-a8cfc5b4bc76',\r\n    stages: [\r\n        {\r\n            id: 'c0704d17-9746-489b-a3eb-a8cfc5b4bc76',\r\n            type: EncounterStageType.CHOICE,\r\n            text: ['You see an old chest. It appears to be locked.', 'What do you do?'],\r\n            choices: [\r\n                {\r\n                    type: ChoiceType.ROLL,\r\n                    description: 'Break the chest open',\r\n                    requirements: { [Stat.STR]: 2 },\r\n                    dc: 10,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'You smash the chest so hard that it is reduced to splinters. Inside is the ruined body of a mimic as well as some gear left from a previous - less fortunate - adventurer',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'You strike the chest hard, breaking open the wooden frame. Blood and flailing tendrils spring forth immediately. The chest was a mimic! Fortunately you have managed to wound it without placing yourself in danger.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'You strike the chest but your blow ricochets off leaving only superficial damage. To your surprise the chest opens in response and strong tendrils spring forth, entangling your limbs.',\r\n                            ],\r\n                        },\r\n                        criticalFailure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'Holding your weapon shakily you do your best to open the chest with force. Your strike throws you off balance and your blow barely glaces off the chest while you fall flat on the floor.',\r\n                                'While you scramble to regain your dignity the chest, surprisingly, opens. Before you can even regain your footing strong tendrils have launched from the chest and ensnared you thoroughly. You are slowly dragged towards the mimic.',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: ChoiceType.ROLL,\r\n                    description: 'Pick the lock',\r\n                    requirements: { [Stat.DEX]: 3 },\r\n                    dc: 16,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'With well honed skill you deftly tease the lock open. In one smooth motion you remove the padlock and open the chest - all without making a sound.',\r\n                                'Inside you find a heaped mass of tentacles. A dormant mimic! You were lucky not to disturb it.',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'After some time working at it the heavy padlock on the chest gives a satisfying “click”. Before you can investigate the contents, however the chest springs open on its own. You leap backwards just in time to avoid the grasp of a mimic’s tendrils.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'You pick and pick at the lock but your patience yields before it does. Eventually you are forced to concede and walk away empty handed.',\r\n                            ],\r\n                        },\r\n                        criticalFailure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'You insert your tools into the lock only to have them snap the moment you apply pressure. In frustration you kick the chest in anger. To your shock, and initial delight, the chest springs open… to reveal a mass of thrashing tentacles.',\r\n                                'The mimic coils around you in a flash, ensnaring all your limbs before you can back away. You are slowly dragged towards the mimic.',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: ChoiceType.ROLL,\r\n                    description: 'Check the chest for traps',\r\n                    requirements: { [Stat.WIS]: 1 },\r\n                    dc: 18,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'Careful observation combined with long years of experience tells you one thing: this is a mimic. Only a fool would try to open one carelessly. You should either prepare to deal with it or walk away now.',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'Carefully studying the chest you notice a few things amiss. It is positioned conspicuously - something you wouldn’t expect when storing valuables. It is also noticeably less dusty than the surrounding, suggesting that it was moved here recently. You have no firm proof, but you definitely suspect a trap.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: ['You don’t notice anything out of the ordinary.'],\r\n                        },\r\n                        criticalFailure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'While your attention is focused on the chest something else focuses its attention on you...',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: ChoiceType.ROLL,\r\n                    description: 'Open the chest using magic',\r\n                    requirements: { [Stat.INT]: 6 },\r\n                    dc: 18,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'The valuable items from the chest teleport directly to you. Oddly some of them seem to be coated in digestive fluid. It seems you looted not only the chest but the stomach contents of its occupying mimic. Good thing you were precise with your incantation.',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'The contents of the chest teleport directly to you. Unfortunately this includes a dormant mimic. You can try to fight it or back away now.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: ['Your spell fizzles. Magic is hard.'],\r\n                        },\r\n                        criticalFailure: {\r\n                            type: OutcomeType.END_ENCOUNTER,\r\n                            text: [\r\n                                'Your magic runs amok. Instead of teleporting the contents of the chest directly to you, you find yourself teleported to them! Worse, this chest appears to have been the hiding spot for a mimic. You are trapped in a locked chest surrounded by tentacles.',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: ChoiceType.END_ENCOUNTER,\r\n                    description: 'Ignore the chest',\r\n                    text: ['You ignore the chest and move on'],\r\n                    continueText: 'Continue',\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n","import { Component, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { noop } from '../common/functions';\r\nimport { encounterRegister } from '../common/redux/encounter/encounterActions';\r\nimport './CombatSandbox1.scss';\r\nimport { EncounterPanel } from './components/EncounterPanel/EncounterPanel';\r\nimport { PlayerConfigPanel } from './components/PlayerConfigPanel/PlayerConfigPanel';\r\nimport { encounter1 } from './encounter1';\r\nimport { Scene } from './enums';\r\nimport { Player } from './Player';\r\nimport { setScene } from './redux/actions/game-actions';\r\nimport { setPlayer } from './redux/actions/player-actions';\r\nimport { defaultPlayer } from './redux/reducers/player-reducer';\r\nimport { State } from './redux/store';\r\n\r\nexport interface CombatSandbox1Props {\r\n    player: Player;\r\n    load: () => void;\r\n}\r\n\r\nexport class CombatSandbox1 extends Component<CombatSandbox1Props> {\r\n    public static defaultProps?: Pick<CombatSandbox1Props, any> = {\r\n        load: noop,\r\n    };\r\n\r\n    public constructor(props: CombatSandbox1Props) {\r\n        super(props);\r\n        props.load();\r\n    }\r\n\r\n    public render({ player }: CombatSandbox1Props): VNode {\r\n        return (\r\n            <div className=\"CombatSandbox1\">\r\n                <div className=\"config-panel\">\r\n                    <div className=\"panel-header\">\r\n                        <h2>Configuration</h2>\r\n                    </div>\r\n                    <PlayerConfigPanel />\r\n                </div>\r\n                <div className=\"encounter-panel\">\r\n                    <div className=\"panel-header\">\r\n                        <h2>Encounter</h2>\r\n                    </div>\r\n                    <EncounterPanel />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State): Partial<CombatSandbox1Props> {\r\n    return {\r\n        player: state.player,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<CombatSandbox1Props> {\r\n    return {\r\n        load(): void {\r\n            dispatch(encounterRegister(encounter1));\r\n            dispatch(setPlayer(defaultPlayer()));\r\n            dispatch(setScene(Scene.ENCOUNTER_SELECT));\r\n        },\r\n    };\r\n}\r\n\r\nexport const ConnectedCombatSandbox1 = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CombatSandbox1 as any);\r\n","import { Action, Reducer } from 'redux';\r\nimport { Player } from '../../../combat-sandbox-1/Player';\r\nimport { PayloadAction } from '../../../combat-sandbox-1/redux/redux-utils';\r\nimport { getRequiredStats } from '../../encounter/encounterUtils';\r\nimport {\r\n    ActiveEncounter,\r\n    RollOutcomeType,\r\n    RollState,\r\n    StageState,\r\n} from '../../model/encounter/ActiveEncounter';\r\nimport { Encounter } from '../../model/encounter/Encounter';\r\nimport {\r\n    ChoiceType,\r\n    EncounterChoice,\r\n    instanceofRollChoice,\r\n} from '../../model/encounter/EncounterChoice';\r\nimport { EncounterOutcome } from '../../model/encounter/EncounterOutcome';\r\nimport { instanceOfChoicesStage } from '../../model/encounter/EncounterStage';\r\nimport { EncounterAction, EncounterRollDef } from './encounterActions';\r\n\r\nfunction defaultActiveEncounter(): ActiveEncounter {\r\n    return { encounter: null, stage: null, stageState: null };\r\n}\r\n\r\nconst reducers: Record<string, Reducer<ActiveEncounter>> = {\r\n    [EncounterAction.START]: encounterStartReducer,\r\n    [EncounterAction.RESET]: encounterResetReducer,\r\n    [EncounterAction.SELECT_CHOICE]: encounterSelectChoiceReducer,\r\n    [EncounterAction.SET_STAGE_STATE]: encounterSetStageStateReducer,\r\n    [EncounterAction.ROLL]: encounterRollReducer,\r\n    [EncounterAction.ROLL_CONTINUE]: encounterRollContinueReducer,\r\n};\r\n\r\nexport function activeEncounterReducer(\r\n    state: ActiveEncounter = defaultActiveEncounter(),\r\n    action: Action\r\n): ActiveEncounter {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(state, action) : state;\r\n}\r\n\r\nfunction encounterStartReducer(\r\n    state: ActiveEncounter,\r\n    action: PayloadAction<Encounter>\r\n): ActiveEncounter {\r\n    const encounter = action.payload;\r\n    if (encounter) {\r\n        const stage = encounter.stages.find((s) => s.id === encounter.entryStage);\r\n        if (stage) {\r\n            return { encounter, stage, stageState: StageState.INIT };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction encounterResetReducer(): ActiveEncounter {\r\n    return defaultActiveEncounter();\r\n}\r\n\r\nfunction encounterSelectChoiceReducer(\r\n    state: ActiveEncounter,\r\n    { payload }: PayloadAction<EncounterChoice>\r\n): ActiveEncounter {\r\n    if (\r\n        state.stageState !== StageState.INIT ||\r\n        !payload ||\r\n        !instanceOfChoicesStage(state.stage) ||\r\n        !state.stage.choices.includes(payload)\r\n    ) {\r\n        return state;\r\n    }\r\n    const newState = { ...state, stageState: StageState.PICKED, choice: payload };\r\n    if (payload.type === ChoiceType.ROLL) {\r\n        newState.rollState = RollState.INIT;\r\n    }\r\n    return newState;\r\n}\r\n\r\nfunction encounterSetStageStateReducer(\r\n    state: ActiveEncounter,\r\n    { payload }: PayloadAction<StageState>\r\n): ActiveEncounter {\r\n    if (payload !== state.stageState) {\r\n        return { ...state, stageState: payload };\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction encounterRollReducer(\r\n    state: ActiveEncounter,\r\n    { payload }: PayloadAction<EncounterRollDef>\r\n): ActiveEncounter {\r\n    if (payload) {\r\n        const rolls = state.rolls ?? [];\r\n        rolls.push(payload.roll);\r\n        return { ...state, rolls };\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction encounterRollContinueReducer(\r\n    state: ActiveEncounter,\r\n    action: PayloadAction<Player>\r\n): ActiveEncounter {\r\n    const { rolls, choice } = state;\r\n    if (!instanceofRollChoice(choice)) return state;\r\n\r\n    const player = action.payload;\r\n    const { dc, outcomes } = choice;\r\n    const stats = getRequiredStats(choice);\r\n    const statSum = stats.reduce((sum, stat) => sum + player[stat], 0);\r\n    const rollSum = rolls.reduce((sum, roll) => sum + roll, 0);\r\n    const total = statSum + rollSum;\r\n    let rollOutcome: EncounterOutcome;\r\n    let rollOutcomeType: RollOutcomeType;\r\n    if (rolls.includes(20) || total >= dc + 10) {\r\n        rollOutcome = outcomes.criticalSuccess ?? outcomes.success;\r\n        rollOutcomeType = outcomes.criticalSuccess\r\n            ? RollOutcomeType.CRITICAL_SUCCESS\r\n            : RollOutcomeType.SUCCESS;\r\n    } else if (total < 7) {\r\n        rollOutcome = outcomes.criticalFailure ?? outcomes.failure;\r\n        rollOutcomeType = outcomes.criticalFailure\r\n            ? RollOutcomeType.CRITICAL_FAILURE\r\n            : RollOutcomeType.FAILURE;\r\n    } else if (total >= dc) {\r\n        rollOutcome = outcomes.success;\r\n        rollOutcomeType = RollOutcomeType.SUCCESS;\r\n    } else {\r\n        rollOutcome = outcomes.failure;\r\n        rollOutcomeType = RollOutcomeType.FAILURE;\r\n    }\r\n    return {\r\n        ...state,\r\n        rollState: RollState.ROLLED,\r\n        rollTotal: total,\r\n        rollOutcome,\r\n        rollOutcomeType,\r\n    };\r\n}\r\n","import { Action, Reducer } from 'redux';\r\nimport { PayloadAction } from '../../../combat-sandbox-1/redux/redux-utils';\r\nimport { Encounter } from '../../model/encounter/Encounter';\r\nimport { EncounterAction } from './encounterActions';\r\n\r\nconst reducers: Record<string, Reducer<Record<string, Encounter>>> = {\r\n    [EncounterAction.REGISTER]: encounterRegisterReducer,\r\n};\r\n\r\nexport function encounterByIdReducer(\r\n    state: Record<string, Encounter> = {},\r\n    action: Action\r\n): Record<string, Encounter> {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(state, action) : state;\r\n}\r\n\r\nfunction encounterRegisterReducer(\r\n    state: Record<string, Encounter>,\r\n    action: PayloadAction<Encounter>\r\n): Record<string, Encounter> {\r\n    const encounter = action.payload;\r\n\r\n    if (!encounter) {\r\n        return state;\r\n    }\r\n\r\n    if (state[encounter.id]) {\r\n        console.warn(`Duplicate encounter ID registered: ${encounter.id}`);\r\n    }\r\n\r\n    return { ...state, [encounter.id]: encounter };\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { activeEncounterReducer } from './activeEncounterReducer';\r\nimport { encounterByIdReducer } from './encounterByIdReducer';\r\nimport { EncounterState } from './encounterState';\r\n\r\nexport const encounterReducer = combineReducers<EncounterState>({\r\n    byId: encounterByIdReducer,\r\n    active: activeEncounterReducer,\r\n});\r\n","import { Action, Reducer } from 'redux';\r\nimport { Scene } from '../../enums';\r\nimport { GameActions } from '../actions/game-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducers: Record<string, Reducer<Scene>> = {\r\n    [GameActions.SET_SCENE]: setSceneReducer,\r\n};\r\n\r\nexport function currentSceneReducer(currentScene = Scene.ENCOUNTER_SELECT, action: Action): Scene {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(currentScene, action) : currentScene;\r\n}\r\n\r\nfunction setSceneReducer(currentScene: Scene, { payload }: PayloadAction<Scene>): Scene {\r\n    return payload;\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { encounterReducer } from '../../common/redux/encounter/encounterReducer';\r\nimport { currentSceneReducer } from './reducers/current-scene-reducer';\r\nimport { playerReducer } from './reducers/player-reducer';\r\nimport { State } from './store';\r\n\r\nexport const rootReducer = combineReducers<State>({\r\n    player: playerReducer,\r\n    encounter: encounterReducer,\r\n    currentScene: currentSceneReducer,\r\n});\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/index';\r\nimport { EncounterState } from '../../common/redux/encounter/encounterState';\r\nimport { Scene } from '../enums';\r\nimport { ActiveEncounter } from '../model/ActiveEncounter';\r\nimport { Encounter } from '../model/Encounter';\r\nimport { Player } from '../Player';\r\nimport { rootReducer } from './root-reducer';\r\n\r\nexport interface OldEncounterState {\r\n    all: Record<string, Encounter>;\r\n    active: ActiveEncounter;\r\n}\r\n\r\nexport interface State {\r\n    player: Player;\r\n    currentScene: Scene;\r\n    encounter: EncounterState;\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n","import { h, render } from 'preact';\nimport { Provider } from 'react-redux';\nimport { ConnectedCombatSandbox1 } from './combat-sandbox-1/CombatSandbox1';\nimport { store } from './combat-sandbox-1/redux/store';\nimport './index.scss';\n\nconst appRoot = document.getElementById('app-root');\n\nrender(\n    <Provider store={store}>\n        <ConnectedCombatSandbox1 />\n    </Provider>,\n    appRoot\n);\n"],"sourceRoot":""}