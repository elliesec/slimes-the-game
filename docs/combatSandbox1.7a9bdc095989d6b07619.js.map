{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/combat-sandbox-1/assets/mimic.jpg","webpack:///./src/combat-sandbox-1/enums.ts","webpack:///./src/combat-sandbox-1/model/EncounterStage.ts","webpack:///./src/combat-sandbox-1/model/ActiveEncounter.ts","webpack:///./src/combat-sandbox-1/redux/actions/encounter-actions.ts","webpack:///./src/common/functions.ts","webpack:///./src/combat-sandbox-1/Player.ts","webpack:///./src/combat-sandbox-1/model/encounter-utils.ts","webpack:///./src/combat-sandbox-1/model/EncounterOption.ts","webpack:///./src/combat-sandbox-1/components/EncounterScene/OptionItem.tsx","webpack:///./src/combat-sandbox-1/components/EncounterScene/RollDisplay.tsx","webpack:///./src/combat-sandbox-1/components/EncounterScene/OptionsStageView.tsx","webpack:///./src/combat-sandbox-1/components/EncounterScene/StageView.tsx","webpack:///./src/combat-sandbox-1/components/EncounterScene/EncounterScene.tsx","webpack:///./src/combat-sandbox-1/redux/actions/game-actions.ts","webpack:///./src/combat-sandbox-1/components/EncounterView/EncounterSelection.tsx","webpack:///./src/combat-sandbox-1/components/EncounterView/EncounterView.tsx","webpack:///./src/combat-sandbox-1/redux/actions/player-actions.ts","webpack:///./src/combat-sandbox-1/redux/reducers/player-reducer.ts","webpack:///./src/combat-sandbox-1/components/PlayerConfigPanel/PlayerConfigPanelInput.tsx","webpack:///./src/combat-sandbox-1/components/PlayerConfigPanel/PlayerConfigPanel.tsx","webpack:///./src/combat-sandbox-1/encounter1.ts","webpack:///./src/combat-sandbox-1/CombatSandbox1.tsx","webpack:///./src/combat-sandbox-1/redux/reducers/current-scene-reducer.ts","webpack:///./src/combat-sandbox-1/redux/reducers/active-encounter-reducer.ts","webpack:///./src/combat-sandbox-1/redux/reducers/all-encounters-reducer.ts","webpack:///./src/combat-sandbox-1/redux/reducers/encounter-reducer.ts","webpack:///./src/combat-sandbox-1/redux/root-reducer.ts","webpack:///./src/combat-sandbox-1/redux/store.ts","webpack:///./src/combatSandbox1.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Scene","EncounterStageType","EncounterStageState","EncounterActions","noop","args","Stat","statNames","STR","DEX","CON","WIS","INT","CHA","statAbbreviations","statKeys","EncounterOptionType","instanceOfDifficultyCheckOption","option","type","DIFFICULTY_CHECK","DifficultyCheckItem","player","onClick","fixed","requirements","text","requiredStats","keys","getRequiredStats","statList","map","stat","getStatAbbreviation","statText","join","failRequirement","some","req","checkStatRequirement","className","disabled","OptionItem","stage","rolls","stats","rollTotal","reduce","sum","roll","getStatName","InitStateView","onOptionSelect","options","RollStateView","activeEncounterStage","onRoll","willpower","encounter","ownProps","active","dispatch","SELECT_ENCOUNTER_OPTION","payload","selectEncounterOption","dieFaces","willpowerCost","ACTIVE_ENCOUNTER_ROLL","activeEncounterRoll","props","state","INIT","ROLL","StageTypeView","OPTIONS","instanceOfOptionsEncounterStage","mimic","activeEncounter","encounterStage","stages","find","id","src","alt","GameActions","setScene","scene","SET_SCENE","super","this","selectedEncounter","onSelectChange","onSelectEncounter","encounters","htmlFor","onChange","e","encounterId","currentTarget","setState","defaultProps","values","all","START_ENCOUNTER","startEncounter","ENCOUNTER","currentScene","ENCOUNTER_SELECT","ENCOUNTER_END","renderView","PlayerActions","setPlayer","SET_PLAYER","setStat","statName","SET_PLAYER_STAT","reducerMap","SET_PLAYER_DESCRIPTION","PlayerConfigPanelInput","label","ConnectedPlayerConfigPanel","maxWillpower","strength","dexterity","constitution","wisdom","intelligence","charisma","setDescription","Number","onPlayerReset","onNameChange","onStrengthChange","onDexterityChange","onConstitutionChange","onWisdomChange","onIntelligenceChange","onCharismaChange","onMaxWillpowerChange","onWillpowerChange","min","encounter1","initialStageId","difficultyCheck","outcomes","criticalSuccess","success","resourceMods","failure","criticalFailure","FLAVOUR","nextStageId","END_SCENE","continueText","load","ConnectedCombatSandbox1","REGISTER_ENCOUNTER","reducers","stageId","newStageState","createEncounterRollStage","console","warn","Math","floor","random","encounterReducer","action","reducer","rootReducer","store","appRoot","document","getElementById"],"mappings":"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","file":"combatSandbox1.7a9bdc095989d6b07619.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/slimes-the-game/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([48,3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __webpack_public_path__ + \"assets/c627a862d41d9026b5ade2a0fda5b886.jpg\";","export enum Scene {\n    ENCOUNTER_SELECT = 'ENCOUNTER_SELECT',\n    ENCOUNTER = 'ENCOUNTER',\n    ENCOUNTER_END = 'ENCOUNTER_END',\n}\n","import { EncounterOption } from './EncounterOption';\r\n\r\nexport enum EncounterStageType {\r\n    OPTIONS = 'options',\r\n    FLAVOUR = 'flavour',\r\n    END_SCENE = 'endScene',\r\n}\r\n\r\nexport interface EncounterStageBase {\r\n    id: number;\r\n    type: EncounterStageType;\r\n    text: string[];\r\n}\r\n\r\nexport interface OptionsEncounterStage extends EncounterStageBase {\r\n    type: EncounterStageType.OPTIONS;\r\n    options: EncounterOption[];\r\n}\r\n\r\nexport interface FlavourEncounterStage extends EncounterStageBase {\r\n    type: EncounterStageType.FLAVOUR;\r\n    continueText: string;\r\n    nextStageId: number;\r\n}\r\n\r\nexport interface EndSceneEncounterStage extends EncounterStageBase {\r\n    type: EncounterStageType.END_SCENE;\r\n    continueText: string;\r\n}\r\n\r\nexport type EncounterStage = OptionsEncounterStage | FlavourEncounterStage | EndSceneEncounterStage;\r\n\r\nexport function instanceOfOptionsEncounterStage(\r\n    stage: EncounterStage\r\n): stage is OptionsEncounterStage {\r\n    return stage.type === EncounterStageType.OPTIONS;\r\n}\r\n\r\nexport function instanceOfFlavourEncounterStage(\r\n    stage: EncounterStage\r\n): stage is FlavourEncounterStage {\r\n    return stage.type === EncounterStageType.FLAVOUR;\r\n}\r\n\r\nexport function instanceOfEndSceneEncounterStage(\r\n    stage: EncounterStage\r\n): stage is EndSceneEncounterStage {\r\n    return stage.type === EncounterStageType.END_SCENE;\r\n}\r\n","import { Encounter } from './Encounter';\r\nimport { EncounterOption } from './EncounterOption';\r\n\r\nexport enum EncounterStageState {\r\n    INIT = 'INIT',\r\n    ROLL = 'ROLL',\r\n}\r\n\r\nexport interface ActiveEncounterStageBase {\r\n    id: number;\r\n    state: EncounterStageState;\r\n}\r\n\r\nexport interface ActiveEncounterInitStage extends ActiveEncounterStageBase {\r\n    state: EncounterStageState.INIT;\r\n}\r\n\r\nexport interface ActiveEncounterRollStage extends ActiveEncounterStageBase {\r\n    state: EncounterStageState.ROLL;\r\n    option: EncounterOption;\r\n    rolls: number[];\r\n}\r\n\r\nexport type ActiveEncounterStage = ActiveEncounterInitStage | ActiveEncounterRollStage;\r\n\r\nexport interface ActiveEncounter {\r\n    encounter: Encounter;\r\n    stage: ActiveEncounterStage;\r\n}\r\n\r\nexport function isInitStageState(stage: ActiveEncounterStage): stage is ActiveEncounterInitStage {\r\n    return stage.state === EncounterStageState.INIT;\r\n}\r\n\r\nexport function isRollStageState(stage: ActiveEncounterStage): stage is ActiveEncounterRollStage {\r\n    return stage.state === EncounterStageState.ROLL;\r\n}\r\n","import { Encounter } from '../../model/Encounter';\r\nimport { EncounterOption } from '../../model/EncounterOption';\r\nimport { OptionsEncounterStage } from '../../model/EncounterStage';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nexport interface EncounterStageAndOption {\r\n    stage: OptionsEncounterStage;\r\n    option: EncounterOption;\r\n}\r\n\r\nexport interface EncounterRollCall {\r\n    dieFaces: number;\r\n    willpowerCost: number;\r\n}\r\n\r\nexport enum EncounterActions {\r\n    REGISTER_ENCOUNTER = 'REGISTER_ENCOUNTER',\r\n    START_ENCOUNTER = 'START_ENCOUNTER',\r\n    SELECT_ENCOUNTER_OPTION = 'SELECT_ENCOUNTER_OPTION',\r\n    ACTIVE_ENCOUNTER_ROLL = 'ACTIVE_ENCOUNTER_ROLL',\r\n}\r\n\r\nexport function registerEncounter(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterActions.REGISTER_ENCOUNTER, payload: encounter };\r\n}\r\n\r\nexport function startEncounter(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterActions.START_ENCOUNTER, payload: encounter };\r\n}\r\n\r\nexport function selectEncounterOption(\r\n    stage: OptionsEncounterStage,\r\n    option: EncounterOption\r\n): PayloadAction<EncounterStageAndOption> {\r\n    return { type: EncounterActions.SELECT_ENCOUNTER_OPTION, payload: { stage, option } };\r\n}\r\n\r\nexport function activeEncounterRoll(\r\n    dieFaces: number,\r\n    willpowerCost: number\r\n): PayloadAction<EncounterRollCall> {\r\n    return { type: EncounterActions.ACTIVE_ENCOUNTER_ROLL, payload: { dieFaces, willpowerCost } };\r\n}\r\n","export type Callback<T> = (t: T) => void;\n\nexport function noop(...args: any[]): void {\n    return;\n}\n","export enum Stat {\r\n    STR = 'strength',\r\n    DEX = 'dexterity',\r\n    CON = 'constitution',\r\n    WIS = 'wisdom',\r\n    INT = 'intelligence',\r\n    CHA = 'charisma',\r\n}\r\n\r\nexport interface PlayerStats {\r\n    maxWillpower: number;\r\n    willpower: number;\r\n    strength: number;\r\n    dexterity: number;\r\n    constitution: number;\r\n    wisdom: number;\r\n    intelligence: number;\r\n    charisma: number;\r\n}\r\n\r\nexport interface PlayerDescription {\r\n    name: string;\r\n}\r\n\r\nexport interface Player extends PlayerDescription, PlayerStats {}\r\n","import { Player, PlayerStats, Stat } from '../Player';\r\nimport { OptionRequirements } from './EncounterOption';\r\n\r\nconst statNames: Record<Stat, string> = {\r\n    [Stat.STR]: 'Strength',\r\n    [Stat.DEX]: 'Dexterity',\r\n    [Stat.CON]: 'Constitution',\r\n    [Stat.WIS]: 'Wisdom',\r\n    [Stat.INT]: 'Intelligence',\r\n    [Stat.CHA]: 'Charisma',\r\n};\r\n\r\nconst statAbbreviations: Record<Stat, string> = {\r\n    [Stat.STR]: 'STR',\r\n    [Stat.DEX]: 'DEX',\r\n    [Stat.CON]: 'CON',\r\n    [Stat.WIS]: 'WIS',\r\n    [Stat.INT]: 'INT',\r\n    [Stat.CHA]: 'CHA',\r\n};\r\n\r\nconst statKeys: Record<Stat, keyof PlayerStats> = {\r\n    [Stat.STR]: 'strength',\r\n    [Stat.DEX]: 'dexterity',\r\n    [Stat.CON]: 'constitution',\r\n    [Stat.WIS]: 'wisdom',\r\n    [Stat.INT]: 'intelligence',\r\n    [Stat.CHA]: 'charisma',\r\n};\r\n\r\nexport function getRequiredStats(option: OptionRequirements): Stat[] {\r\n    return Object.keys(option) as Stat[];\r\n}\r\n\r\nexport function getStatName(stat: Stat): string {\r\n    return statNames[stat];\r\n}\r\n\r\nexport function getStatAbbreviation(stat: Stat): string {\r\n    return statAbbreviations[stat];\r\n}\r\n\r\nexport function checkStatRequirement(player: Player, stat: Stat, req: number): boolean {\r\n    const key = statKeys[stat];\r\n    return player[key] >= req;\r\n}\r\n","import { Stat } from '../Player';\r\n\r\nexport enum EncounterOptionType {\r\n    DIFFICULTY_CHECK = 'difficultyCheck',\r\n    FLAVOUR = 'flavour',\r\n}\r\n\r\nexport type OptionRequirements = Partial<Record<Stat, number>>;\r\n\r\nexport interface EncounterOptionBase {\r\n    type: EncounterOptionType;\r\n    text: string;\r\n}\r\n\r\nexport interface ResourceMods {\r\n    willpower?: number;\r\n}\r\n\r\nexport interface DifficultyCheckOptionOutcome {\r\n    text: string[];\r\n    resourceMods?: ResourceMods;\r\n}\r\n\r\nexport interface DifficultyCheckOptionOutcomes {\r\n    criticalSuccess: DifficultyCheckOptionOutcome;\r\n    success: DifficultyCheckOptionOutcome;\r\n    failure: DifficultyCheckOptionOutcome;\r\n    criticalFailure: DifficultyCheckOptionOutcome;\r\n}\r\n\r\nexport interface DifficultyCheckOption extends EncounterOptionBase {\r\n    type: EncounterOptionType.DIFFICULTY_CHECK;\r\n    requirements?: OptionRequirements;\r\n    difficultyCheck: number;\r\n    outcomes: DifficultyCheckOptionOutcomes;\r\n}\r\n\r\nexport interface FlavourOption extends EncounterOptionBase {\r\n    type: EncounterOptionType.FLAVOUR;\r\n    nextStageId: number;\r\n}\r\n\r\nexport type EncounterOption = DifficultyCheckOption | FlavourOption;\r\n\r\nexport function instanceOfDifficultyCheckOption(\r\n    option: EncounterOption\r\n): option is DifficultyCheckOption {\r\n    return option.type === EncounterOptionType.DIFFICULTY_CHECK;\r\n}\r\n\r\nexport function instanceOfFlavourOption(option: EncounterOption): option is FlavourOption {\r\n    return option.type === EncounterOptionType.FLAVOUR;\r\n}\r\n","import classNames from 'classnames';\r\nimport { h, VNode } from 'preact';\r\nimport { Callback } from '../../../common/functions';\r\nimport {\r\n    checkStatRequirement,\r\n    getRequiredStats,\r\n    getStatAbbreviation,\r\n} from '../../model/encounter-utils';\r\nimport {\r\n    DifficultyCheckOption,\r\n    EncounterOption,\r\n    instanceOfDifficultyCheckOption,\r\n} from '../../model/EncounterOption';\r\nimport { Player } from '../../Player';\r\n\r\nexport interface OptionItemProps<O extends EncounterOption> {\r\n    player: Player;\r\n    option: O;\r\n    onClick: Callback<O>;\r\n    fixed?: boolean;\r\n}\r\n\r\nconst DifficultyCheckItem = ({\r\n    player,\r\n    option,\r\n    onClick,\r\n    fixed,\r\n}: OptionItemProps<DifficultyCheckOption>): VNode => {\r\n    const { requirements, text } = option;\r\n    const requiredStats = getRequiredStats(requirements);\r\n    const statList = requiredStats.map(\r\n        (stat) => `${getStatAbbreviation(stat)} ${requirements[stat]}`\r\n    );\r\n    const statText = requiredStats.length ? `[${statList.join(', ')}] ` : '';\r\n    const failRequirement = requiredStats.some(\r\n        (stat) => !checkStatRequirement(player, stat, requirements[stat])\r\n    );\r\n    return (\r\n        <li\r\n            className={classNames('OptionItem', 'DifficultyCheckItem', {\r\n                disabled: failRequirement,\r\n                fixed: !!fixed,\r\n            })}\r\n            onClick={() => onClick(option)}\r\n        >\r\n            <strong>{statText}</strong>\r\n            <span>{text}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport const OptionItem = ({ player, option, onClick, fixed }: OptionItemProps<any>): VNode => {\r\n    if (instanceOfDifficultyCheckOption(option)) {\r\n        return (\r\n            <DifficultyCheckItem player={player} option={option} onClick={onClick} fixed={fixed} />\r\n        );\r\n    } else {\r\n        return <li className=\"OptionItem\">{option.text}</li>;\r\n    }\r\n};\r\n","import { h, VNode } from 'preact';\r\nimport { ActiveEncounterRollStage } from '../../model/ActiveEncounter';\r\nimport { getStatName } from '../../model/encounter-utils';\r\nimport { DifficultyCheckOption } from '../../model/EncounterOption';\r\nimport { Player, Stat } from '../../Player';\r\nimport './RollDisplay.scss';\r\n\r\nexport interface RollDisplayProps {\r\n    player: Player;\r\n    stage: ActiveEncounterRollStage;\r\n}\r\n\r\nexport const RollDisplay = ({ player, stage: { option, rolls } }: RollDisplayProps): VNode => {\r\n    const stats = Object.keys((option as DifficultyCheckOption).requirements) as Stat[];\r\n    const rollTotal =\r\n        stats.reduce((sum, stat) => sum + player[stat], 0) +\r\n        rolls.reduce((sum, roll) => sum + roll, 0);\r\n    return (\r\n        <div className=\"RollDisplay\">\r\n            <h4>Roll Details</h4>\r\n            <ul>\r\n                {stats.map((stat: Stat) => (\r\n                    <li>\r\n                        <strong>Your {getStatName(stat)}: </strong>\r\n                        <span>{player[stat]}</span>\r\n                    </li>\r\n                ))}\r\n                {rolls.map((roll, i) => (\r\n                    <li>\r\n                        <strong>Roll {i + 1}: </strong>\r\n                        <span>{roll}</span>\r\n                    </li>\r\n                ))}\r\n                <li>\r\n                    <strong>Roll Total: </strong>\r\n                    <span>{rollTotal}</span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback, noop } from '../../../common/functions';\r\nimport {\r\n    ActiveEncounterRollStage,\r\n    ActiveEncounterStage,\r\n    isInitStageState,\r\n    isRollStageState,\r\n} from '../../model/ActiveEncounter';\r\nimport { EncounterOption } from '../../model/EncounterOption';\r\nimport { OptionsEncounterStage } from '../../model/EncounterStage';\r\nimport { Player } from '../../Player';\r\nimport { activeEncounterRoll, selectEncounterOption } from '../../redux/actions/encounter-actions';\r\nimport { State } from '../../redux/store';\r\nimport { OptionItem } from './OptionItem';\r\nimport './OptionsStageView.scss';\r\nimport { RollDisplay } from './RollDisplay';\r\n\r\nexport interface ConnectedOptionsStageViewProps {\r\n    stage: OptionsEncounterStage;\r\n}\r\n\r\nexport interface OptionsStageViewProps extends ConnectedOptionsStageViewProps {\r\n    player: Player;\r\n    activeEncounterStage: ActiveEncounterStage;\r\n    onOptionSelect: Callback<EncounterOption>;\r\n    onRoll: (dieFaces: number, willpowerCost: number) => void;\r\n}\r\n\r\nconst InitStateView = ({ player, stage, onOptionSelect }: OptionsStageViewProps): VNode => {\r\n    return (\r\n        <div className=\"InitStateView\">\r\n            <p>\r\n                <strong>What do you do?</strong>\r\n            </p>\r\n            <ul className=\"options\">\r\n                {stage.options.map((option) => (\r\n                    <OptionItem player={player} option={option} onClick={onOptionSelect} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RollStateView = ({ player, activeEncounterStage, onRoll }: OptionsStageViewProps): VNode => {\r\n    const stage = activeEncounterStage as ActiveEncounterRollStage;\r\n    return (\r\n        <div className=\"RollStateView\">\r\n            <ul>\r\n                <OptionItem player={player} option={stage.option} onClick={noop} fixed />\r\n            </ul>\r\n            <RollDisplay player={player} stage={stage} />\r\n            <div className=\"buttons\">\r\n                <button\r\n                    disabled={!!stage.rolls.length && player.willpower < 1}\r\n                    onClick={() => onRoll(20, stage.rolls.length ? 1 : 0)}\r\n                >{`Roll${stage.rolls.length ? ' (1 willpower)' : ''}`}</button>\r\n                {!!stage.rolls.length && <button>Accept</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const OptionsStageView = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(\r\n    (props: OptionsStageViewProps): VNode => (\r\n        <div className=\"OptionsStageView\">\r\n            {isInitStageState(props.activeEncounterStage) && <InitStateView {...props} />}\r\n            {isRollStageState(props.activeEncounterStage) && <RollStateView {...props} />}\r\n        </div>\r\n    )\r\n);\r\n\r\nfunction mapStateToProps(\r\n    { player, encounter }: State,\r\n    ownProps: ConnectedOptionsStageViewProps\r\n): Partial<OptionsStageViewProps> {\r\n    return { player, activeEncounterStage: encounter.active.stage };\r\n}\r\n\r\nfunction mapDispatchToProps(\r\n    dispatch: Dispatch,\r\n    { stage }: ConnectedOptionsStageViewProps\r\n): Partial<OptionsStageViewProps> {\r\n    return {\r\n        onOptionSelect(option: EncounterOption): void {\r\n            dispatch(selectEncounterOption(stage, option));\r\n        },\r\n        onRoll(dieFaces: number, willpowerCost: number): void {\r\n            dispatch(activeEncounterRoll(dieFaces, willpowerCost));\r\n        },\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { EncounterStage, instanceOfOptionsEncounterStage } from '../../model/EncounterStage';\r\nimport { Player } from '../../Player';\r\nimport { State } from '../../redux/store';\r\nimport { OptionsStageView } from './OptionsStageView';\r\nimport './StageView.scss';\r\n\r\nexport interface ConnectedStageViewProps {\r\n    stage: EncounterStage;\r\n}\r\n\r\nexport interface StageViewProps extends ConnectedStageViewProps {\r\n    player: Player;\r\n}\r\n\r\nconst StageTypeView = ({ player, stage }: StageViewProps): VNode => {\r\n    if (instanceOfOptionsEncounterStage(stage)) {\r\n        return <OptionsStageView stage={stage} />;\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const StageView = connect(mapStateToProps)(({ player, stage }: StageViewProps) => (\r\n    <div className=\"StageView\">\r\n        {stage.text.map((t: string) => (\r\n            <p>{t}</p>\r\n        ))}\r\n        <hr />\r\n        <StageTypeView player={player} stage={stage} />\r\n    </div>\r\n));\r\n\r\nfunction mapStateToProps(\r\n    { player }: State,\r\n    ownProps: ConnectedStageViewProps\r\n): Partial<StageViewProps> {\r\n    return { player };\r\n}\r\n","import { Component, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { ActiveEncounter } from '../../model/ActiveEncounter';\r\nimport { EncounterStage } from '../../model/EncounterStage';\r\nimport { State } from '../../redux/store';\r\nimport './EncounterScene.scss';\r\nimport { StageView } from './StageView';\r\n\r\nexport interface EncounterSceneProps {\r\n    activeEncounter: ActiveEncounter;\r\n}\r\n\r\nconst mimic = require('../../assets/mimic.jpg');\r\n\r\nexport class EncounterSceneComponent extends Component<EncounterSceneProps> {\r\n    public render({ activeEncounter }: EncounterSceneProps): VNode {\r\n        const { encounter, stage } = activeEncounter;\r\n        const encounterStage = encounter.stages.find((s: EncounterStage) => s.id === stage.id);\r\n        return (\r\n            <div className=\"EncounterScene\">\r\n                <div className=\"encounter-text\">\r\n                    <div className=\"card\">\r\n                        <h3>Encounter!</h3>\r\n                        <StageView stage={encounterStage} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"encounter-image\">\r\n                    <div className=\"card\">\r\n                        <img src={mimic} alt=\"Lewd Pictures\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport const EncounterScene = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EncounterSceneComponent as any);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterSceneProps> {\r\n    return {\r\n        activeEncounter: state.encounter.active,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EncounterSceneProps> {\r\n    return {};\r\n}\r\n","import { Scene } from '../../enums';\nimport { PayloadAction } from '../redux-utils';\n\nexport enum GameActions {\n    SET_SCENE = 'SET_SCENE',\n}\n\nexport function setScene(scene: Scene): PayloadAction<Scene> {\n    return { type: GameActions.SET_SCENE, payload: scene };\n}\n","import { Component, h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback, noop } from '../../../common/functions';\r\nimport { Encounter } from '../../model/Encounter';\r\nimport { Scene } from '../../enums';\r\nimport { startEncounter } from '../../redux/actions/encounter-actions';\r\nimport { setScene } from '../../redux/actions/game-actions';\r\nimport { State } from '../../redux/store';\r\nimport './EncounterSelection.scss';\r\nimport TargetedEvent = JSXInternal.TargetedEvent;\r\n\r\nexport interface EncounterSelectionProps {\r\n    encounters: Encounter[];\r\n    onSelectEncounter: Callback<Encounter>;\r\n}\r\n\r\nexport interface EncounterSelectionState {\r\n    selectedEncounter: Encounter;\r\n}\r\n\r\nexport class EncounterSelectionComponent extends Component<\r\n    EncounterSelectionProps,\r\n    EncounterSelectionState\r\n> {\r\n    public static defaultProps: Partial<EncounterSelectionProps> = {\r\n        encounters: [],\r\n        onSelectEncounter: noop,\r\n    };\r\n\r\n    public constructor(props: EncounterSelectionProps) {\r\n        super(props);\r\n        this.state = { selectedEncounter: null };\r\n        this.onSelectChange = this.onSelectChange.bind(this);\r\n        this.onSelectEncounter = this.onSelectEncounter.bind(this);\r\n    }\r\n\r\n    public render({ encounters }: EncounterSelectionProps): VNode {\r\n        return (\r\n            <div className=\"EncounterSelection\">\r\n                <h3>Encounter Selection</h3>\r\n                <div className=\"encounter-stats\">\r\n                    <ul className=\"encounter-stats-list\">\r\n                        <li>\r\n                            <span className=\"key\">Encounters Available: </span>\r\n                            <span className=\"value\">{encounters.length}</span>\r\n                        </li>\r\n                    </ul>\r\n                    <hr />\r\n                    <div className=\"encounter-selection-form\">\r\n                        <label htmlFor=\"encounter-select\">\r\n                            <span>Select Encounter: </span>\r\n                            <select\r\n                                id=\"encounter-select\"\r\n                                value={this.state.selectedEncounter?.id}\r\n                                onChange={this.onSelectChange}\r\n                            >\r\n                                <option value=\"\" />\r\n                                {encounters.map((encounter) => (\r\n                                    <option value={encounter.id}>{encounter.name}</option>\r\n                                ))}\r\n                            </select>\r\n                        </label>\r\n                        <button\r\n                            disabled={!this.state.selectedEncounter}\r\n                            onClick={this.onSelectEncounter}\r\n                        >\r\n                            Start Encounter\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSelectChange(e: TargetedEvent<HTMLSelectElement>): void {\r\n        const encounterId = e.currentTarget.value;\r\n        const encounter = this.props.encounters.find((e) => e.id === encounterId) ?? null;\r\n        this.setState({ selectedEncounter: encounter });\r\n    }\r\n\r\n    private onSelectEncounter(): void {\r\n        const { selectedEncounter } = this.state;\r\n        if (selectedEncounter) {\r\n            this.props.onSelectEncounter(selectedEncounter);\r\n        }\r\n    }\r\n}\r\n\r\nexport const EncounterSelection = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EncounterSelectionComponent as any);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterSelectionProps> {\r\n    return {\r\n        encounters: Object.values(state.encounter.all),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EncounterSelectionProps> {\r\n    return {\r\n        onSelectEncounter(encounter: Encounter): void {\r\n            dispatch(startEncounter(encounter));\r\n            dispatch(setScene(Scene.ENCOUNTER));\r\n        },\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Scene } from '../../enums';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterScene } from '../EncounterScene/EncounterScene';\r\nimport { EncounterSelection } from './EncounterSelection';\r\nimport './EncounterView.scss';\r\n\r\nexport interface EncounterViewProps {\r\n    currentScene: Scene;\r\n}\r\n\r\nconst renderView = (currentScene: Scene): VNode => {\r\n    switch (currentScene) {\r\n        case Scene.ENCOUNTER_SELECT:\r\n            return <EncounterSelection />;\r\n        case Scene.ENCOUNTER:\r\n            return <EncounterScene />;\r\n        case Scene.ENCOUNTER_END:\r\n            return <div>Encounter End</div>;\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\nexport const EncounterView = connect(mapStateToProps)(\r\n    ({ currentScene }): VNode => {\r\n        return <div className=\"EncounterView\">{renderView(currentScene)}</div>;\r\n    }\r\n);\r\n\r\nfunction mapStateToProps({ currentScene }: State): Partial<EncounterViewProps> {\r\n    return { currentScene };\r\n}\r\n","import { Player, PlayerDescription, PlayerStats } from '../../Player';\nimport { PayloadAction } from '../redux-utils';\n\nexport enum PlayerActions {\n    SET_PLAYER = 'SET_PLAYER',\n    SET_PLAYER_DESCRIPTION = 'SET_PLAYER_DESCRIPTION',\n    SET_PLAYER_STAT = 'SET_PLAYER_STAT',\n}\n\nexport interface PlayerStatUpdate {\n    statName: keyof PlayerStats;\n    value: number;\n}\n\nexport interface PlayerDescriptionUpdate {\n    key: keyof PlayerDescription;\n    value: string;\n}\n\nexport function setPlayer(player: Player): PayloadAction<Player> {\n    return { type: PlayerActions.SET_PLAYER, payload: player };\n}\n\nexport function setDescription(\n    key: keyof PlayerDescription,\n    value: string\n): PayloadAction<PlayerDescriptionUpdate> {\n    return {\n        type: PlayerActions.SET_PLAYER_DESCRIPTION,\n        payload: { key, value },\n    };\n}\n\nexport function setStat(\n    statName: keyof PlayerStats,\n    value: number\n): PayloadAction<PlayerStatUpdate> {\n    return {\n        type: PlayerActions.SET_PLAYER_STAT,\n        payload: { statName, value },\n    };\n}\n","import { Action, Reducer } from 'redux';\r\nimport { Player } from '../../Player';\r\nimport { EncounterActions, EncounterRollCall } from '../actions/encounter-actions';\r\nimport {\r\n    PlayerActions,\r\n    PlayerDescriptionUpdate,\r\n    PlayerStatUpdate,\r\n} from '../actions/player-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducerMap: Record<string, Reducer<Player>> = {\r\n    [PlayerActions.SET_PLAYER]: setPlayerReducer,\r\n    [PlayerActions.SET_PLAYER_DESCRIPTION]: setPlayerDescriptionReducer,\r\n    [PlayerActions.SET_PLAYER_STAT]: setPlayerStatReducer,\r\n    [EncounterActions.ACTIVE_ENCOUNTER_ROLL]: activeEncounterRollReducer,\r\n};\r\n\r\nexport function playerReducer(player = defaultPlayer(), action: Action): Player {\r\n    const reducer = reducerMap[action.type];\r\n    return reducer ? reducer(player, action) : player;\r\n}\r\n\r\nexport function defaultPlayer(): Player {\r\n    return {\r\n        name: 'Heroine',\r\n        maxWillpower: 10,\r\n        willpower: 10,\r\n        strength: 2,\r\n        dexterity: 2,\r\n        constitution: 2,\r\n        wisdom: 2,\r\n        intelligence: 2,\r\n        charisma: 2,\r\n    };\r\n}\r\n\r\nfunction setPlayerReducer(player: Player, { payload }: PayloadAction<Player>): Player {\r\n    if (payload === player) {\r\n        return player;\r\n    }\r\n    return { ...payload };\r\n}\r\n\r\nfunction setPlayerDescriptionReducer(\r\n    player: Player,\r\n    { payload: { key, value } }: PayloadAction<PlayerDescriptionUpdate>\r\n): Player {\r\n    if (player[key] === value) {\r\n        return player;\r\n    }\r\n    return { ...player, [key]: value };\r\n}\r\n\r\nfunction setPlayerStatReducer(\r\n    player: Player,\r\n    { payload: { statName, value } }: PayloadAction<PlayerStatUpdate>\r\n): Player {\r\n    if (player[statName] === value) {\r\n        return player;\r\n    }\r\n    return { ...player, [statName]: value };\r\n}\r\n\r\nfunction activeEncounterRollReducer(\r\n    player: Player,\r\n    { payload: { willpowerCost } }: PayloadAction<EncounterRollCall>\r\n): Player {\r\n    if (!willpowerCost) {\r\n        return player;\r\n    }\r\n    return {\r\n        ...player,\r\n        willpower: player.willpower - willpowerCost,\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport HTMLAttributes = JSXInternal.HTMLAttributes;\r\n\r\nexport interface PlayerConfigPanelInputProps<T> extends HTMLAttributes<HTMLInputElement> {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport const PlayerConfigPanelInput = <T extends unknown>(\r\n    props: PlayerConfigPanelInputProps<T>\r\n): VNode => (\r\n    <label htmlFor={props.id}>\r\n        <span>{props.label}:</span>\r\n        <input {...props} />\r\n    </label>\r\n);\r\n","import { h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback } from '../../../common/functions';\r\nimport { Player } from '../../Player';\r\nimport { setDescription, setPlayer, setStat } from '../../redux/actions/player-actions';\r\nimport { defaultPlayer } from '../../redux/reducers/player-reducer';\r\nimport { State } from '../../redux/store';\r\nimport './PlayerConfigPanel.scss';\r\nimport { PlayerConfigPanelInput } from './PlayerConfigPanelInput';\r\nimport TargetedEvent = JSXInternal.TargetedEvent;\r\n\r\nexport interface PlayerConfigPanelProps {\r\n    player: Player;\r\n    onPlayerReset: () => void;\r\n    onNameChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onStrengthChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onDexterityChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onConstitutionChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onWisdomChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onIntelligenceChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onCharismaChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onMaxWillpowerChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onWillpowerChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n}\r\n\r\nexport const PlayerConfigPanel = ({\r\n    player,\r\n    onPlayerReset,\r\n    onNameChange,\r\n    onStrengthChange,\r\n    onDexterityChange,\r\n    onConstitutionChange,\r\n    onWisdomChange,\r\n    onIntelligenceChange,\r\n    onCharismaChange,\r\n    onMaxWillpowerChange,\r\n    onWillpowerChange,\r\n}: PlayerConfigPanelProps): VNode => (\r\n    <div className=\"PlayerConfigPanel\">\r\n        <h3 className=\"header-with-buttons\">\r\n            <span>Player</span>\r\n            <button onClick={onPlayerReset}>Reset</button>\r\n        </h3>\r\n        <PlayerConfigPanelInput\r\n            id=\"name-input\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            value={player.name}\r\n            onChange={onNameChange}\r\n        />\r\n        <h4>Attributes</h4>\r\n        <div className=\"attribute-config\">\r\n            <PlayerConfigPanelInput\r\n                id=\"strength-input\"\r\n                label=\"Strength\"\r\n                type=\"number\"\r\n                value={player.strength}\r\n                min={1}\r\n                onChange={onStrengthChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"dexterity-input\"\r\n                label=\"Dexterity\"\r\n                type=\"number\"\r\n                value={player.dexterity}\r\n                min={1}\r\n                onChange={onDexterityChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"constitution-input\"\r\n                label=\"Constitution\"\r\n                type=\"number\"\r\n                value={player.constitution}\r\n                min={1}\r\n                onChange={onConstitutionChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"wisdom-input\"\r\n                label=\"Wisdom\"\r\n                type=\"number\"\r\n                value={player.wisdom}\r\n                min={1}\r\n                onChange={onWisdomChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"intelligence-input\"\r\n                label=\"Intelligence\"\r\n                type=\"number\"\r\n                value={player.intelligence}\r\n                min={1}\r\n                onChange={onIntelligenceChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"charisma-input\"\r\n                label=\"Charisma\"\r\n                type=\"number\"\r\n                value={player.charisma}\r\n                min={1}\r\n                onChange={onCharismaChange}\r\n            />\r\n        </div>\r\n        <hr />\r\n        <h4>Resources</h4>\r\n        <PlayerConfigPanelInput\r\n            id=\"max-willpower-input\"\r\n            label=\"Max Willpower\"\r\n            type=\"number\"\r\n            value={player.maxWillpower}\r\n            min={1}\r\n            onChange={onMaxWillpowerChange}\r\n        />\r\n        <PlayerConfigPanelInput\r\n            id=\"willpower-input\"\r\n            label=\"Willpower\"\r\n            type=\"number\"\r\n            value={player.willpower}\r\n            min={1}\r\n            onChange={onWillpowerChange}\r\n        />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<PlayerConfigPanelProps> {\r\n    return {\r\n        player: state.player,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<PlayerConfigPanelProps> {\r\n    return {\r\n        onPlayerReset(): void {\r\n            dispatch(setPlayer(defaultPlayer()));\r\n        },\r\n        onNameChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = e.currentTarget.value;\r\n            dispatch(setDescription('name', value));\r\n        },\r\n        onStrengthChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('strength', value));\r\n        },\r\n        onDexterityChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('dexterity', value));\r\n        },\r\n        onConstitutionChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('constitution', value));\r\n        },\r\n        onWisdomChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('wisdom', value));\r\n        },\r\n        onIntelligenceChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('intelligence', value));\r\n        },\r\n        onCharismaChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('charisma', value));\r\n        },\r\n        onMaxWillpowerChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('maxWillpower', value));\r\n        },\r\n        onWillpowerChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('willpower', value));\r\n        },\r\n    };\r\n}\r\n\r\nexport const ConnectedPlayerConfigPanel = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PlayerConfigPanel);\r\n","import { Encounter } from './model/Encounter';\r\nimport { EncounterOptionType } from './model/EncounterOption';\r\nimport { EncounterStageType } from './model/EncounterStage';\r\n\r\nexport const encounter1: Encounter = {\r\n    id: 'encounter1',\r\n    name: 'An Old Chest',\r\n    initialStageId: 0,\r\n    stages: [\r\n        {\r\n            id: 0,\r\n            type: EncounterStageType.OPTIONS,\r\n            text: ['You see an old chest. It appears to be locked.'],\r\n            options: [\r\n                {\r\n                    type: EncounterOptionType.DIFFICULTY_CHECK,\r\n                    text: 'Break the chest open',\r\n                    requirements: {\r\n                        strength: 2,\r\n                    },\r\n                    difficultyCheck: 10,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            text: [\r\n                                'You smash the chest so hard that it is reduced to splinters. Inside is the ruined body of a mimic as well as some gear left from a previous - less fortunate - adventurer.',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            text: [\r\n                                'You strike the chest hard, breaking open the wooden frame. Blood and flailing tendrils spring forth immediately. The chest was a mimic! Fortunately you have managed to wound it without placing yourself in danger.',\r\n                            ],\r\n                            resourceMods: {\r\n                                willpower: 1,\r\n                            },\r\n                        },\r\n                        failure: {\r\n                            text: [\r\n                                'You strike the chest but your blow ricochets off leaving only superficial damage. To your surprise the chest opens in response and strong tendrils spring forth, entangling your limbs.',\r\n                            ],\r\n                        },\r\n                        criticalFailure: {\r\n                            text: [\r\n                                'Holding your weapon shakily you do your best to open the chest with force. Your strike throws you off balance and your blow barely glaces off the chest while you fall flat on the floor.',\r\n                                'While you scramble to regain your dignity the chest, surprisingly, opens. Before you can even regain your footing strong tendrils have launched from the chest and ensnared you thoroughly. You are slowly dragged towards the mimic.',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: EncounterOptionType.DIFFICULTY_CHECK,\r\n                    text: 'Pick the lock',\r\n                    requirements: {\r\n                        dexterity: 3,\r\n                    },\r\n                    difficultyCheck: 16,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            text: [\r\n                                'With well honed skill you deftly tease the lock open. In one smooth motion you remove the padlock and open the chest - all without making a sound.',\r\n                                'Inside you find a heaped mass of tentacles. A dormant mimic! You were lucky not to disturb it.',\r\n                            ],\r\n                            resourceMods: {\r\n                                willpower: 1,\r\n                            },\r\n                        },\r\n                        success: {\r\n                            text: [\r\n                                'After some time working at it the heavy padlock on the chest gives a satisfying “click”. Before you can investigate the contents, however the chest springs open on its own. You leap backwards just in time to avoid the grasp of a mimic’s tendrils.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            text: [\r\n                                'You pick and pick at the lock but your patience yields before it does. Eventually you are forced to concede and walk away empty handed.',\r\n                            ],\r\n                        },\r\n                        criticalFailure: {\r\n                            text: [\r\n                                'You insert your tools into the lock only to have them snap the moment you apply pressure. In frustration you kick the chest in anger. To your shock, and initial delight, the chest springs open… to reveal a mass of thrashing tentacles.',\r\n                                'The mimic coils around you in a flash, ensnaring all your limbs before you can back away. You are slowly dragged towards the mimic.',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: EncounterOptionType.DIFFICULTY_CHECK,\r\n                    text: 'Check the chest for traps',\r\n                    requirements: {\r\n                        wisdom: 1,\r\n                    },\r\n                    difficultyCheck: 18,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            text: [\r\n                                'Careful observation combined with long years of experience tells you one thing: this is a mimic. Only a fool would try to open one carelessly. You should either prepare to deal with it or walk away now.',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            text: [\r\n                                'Carefully studying the chest you notice a few things amiss. It is positioned conspicuously - something you wouldn’t expect when storing valuables. It is also noticeably less dusty than the surrounding, suggesting that it was moved here recently. You have no firm proof, but you definitely suspect a trap.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            text: ['You don’t notice anything out of the ordinary.'],\r\n                        },\r\n                        criticalFailure: {\r\n                            text: [\r\n                                'While your attention is focused on the chest something else focuses its attention on you...',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: EncounterOptionType.DIFFICULTY_CHECK,\r\n                    text: 'Open the chest using magic',\r\n                    requirements: {\r\n                        intelligence: 6,\r\n                    },\r\n                    difficultyCheck: 18,\r\n                    outcomes: {\r\n                        criticalSuccess: {\r\n                            text: [\r\n                                'The valuable items from the chest teleport directly to you. Oddly some of them seem to be coated in digestive fluid. It seems you looted not only the chest but the stomach contents of its occupying mimic. Good thing you were precise with your incantation.',\r\n                            ],\r\n                        },\r\n                        success: {\r\n                            text: [\r\n                                'The contents of the chest teleport directly to you. Unfortunately this includes a dormant mimic. You can try to fight it or back away now.',\r\n                            ],\r\n                        },\r\n                        failure: {\r\n                            text: ['Your spell fizzles. Magic is hard.'],\r\n                        },\r\n                        criticalFailure: {\r\n                            text: [\r\n                                'Your magic runs amok. Instead of teleporting the contents of the chest directly to you, you find yourself teleported to them! Worse, this chest appears to have been the hiding spot for a mimic. You are trapped in a locked chest surrounded by tentacles.',\r\n                            ],\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    type: EncounterOptionType.FLAVOUR,\r\n                    text: 'Ignore the chest',\r\n                    nextStageId: 30,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            id: 10,\r\n            type: EncounterStageType.OPTIONS,\r\n            text: ['You attempt to fight the mimic!'],\r\n            options: [],\r\n        },\r\n        {\r\n            id: 20,\r\n            type: EncounterStageType.OPTIONS,\r\n            text: ['You attempt to escape.'],\r\n            options: [],\r\n        },\r\n        {\r\n            id: 30,\r\n            type: EncounterStageType.END_SCENE,\r\n            text: ['You ignore the chest and move on.'],\r\n            continueText: 'Move on',\r\n        },\r\n    ],\r\n};\r\n","import { Component, h, VNode } from 'preact';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { noop } from '../common/functions';\nimport './CombatSandbox1.scss';\nimport { EncounterView } from './components/EncounterView/EncounterView';\nimport { ConnectedPlayerConfigPanel } from './components/PlayerConfigPanel/PlayerConfigPanel';\nimport { encounter1 } from './encounter1';\nimport { Scene } from './enums';\nimport { Player } from './Player';\nimport { registerEncounter } from './redux/actions/encounter-actions';\nimport { setScene } from './redux/actions/game-actions';\nimport { setPlayer } from './redux/actions/player-actions';\nimport { defaultPlayer } from './redux/reducers/player-reducer';\nimport { State } from './redux/store';\n\nexport interface CombatSandbox1Props {\n    player: Player;\n    load: () => void;\n}\n\nexport class CombatSandbox1 extends Component<CombatSandbox1Props> {\n    public static defaultProps?: Pick<CombatSandbox1Props, any> = {\n        load: noop,\n    };\n\n    public constructor(props: CombatSandbox1Props) {\n        super(props);\n        props.load();\n    }\n\n    public render({ player }: CombatSandbox1Props): VNode {\n        return (\n            <div className=\"CombatSandbox1\">\n                <div className=\"config-panel\">\n                    <div className=\"panel-header\">\n                        <h2>Configuration</h2>\n                    </div>\n                    <ConnectedPlayerConfigPanel />\n                </div>\n                <div className=\"encounter-panel\">\n                    <div className=\"panel-header\">\n                        <h2>Encounter</h2>\n                    </div>\n                    <EncounterView />\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: State): Partial<CombatSandbox1Props> {\n    return {\n        player: state.player,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<CombatSandbox1Props> {\n    return {\n        load(): void {\n            dispatch(registerEncounter(encounter1));\n            dispatch(setPlayer(defaultPlayer()));\n            dispatch(setScene(Scene.ENCOUNTER_SELECT));\n        },\n    };\n}\n\nexport const ConnectedCombatSandbox1 = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CombatSandbox1 as any);\n","import { Action, Reducer } from 'redux';\r\nimport { Scene } from '../../enums';\r\nimport { GameActions } from '../actions/game-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducers: Record<string, Reducer<Scene>> = {\r\n    [GameActions.SET_SCENE]: setSceneReducer,\r\n};\r\n\r\nexport function currentSceneReducer(currentScene = Scene.ENCOUNTER_SELECT, action: Action): Scene {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(currentScene, action) : currentScene;\r\n}\r\n\r\nfunction setSceneReducer(currentScene: Scene, { payload }: PayloadAction<Scene>): Scene {\r\n    return payload;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\nimport {\r\n    ActiveEncounter,\r\n    ActiveEncounterInitStage,\r\n    ActiveEncounterRollStage,\r\n    ActiveEncounterStage,\r\n    EncounterStageState,\r\n} from '../../model/ActiveEncounter';\r\nimport { Encounter } from '../../model/Encounter';\r\nimport {\r\n    DifficultyCheckOption,\r\n    instanceOfDifficultyCheckOption,\r\n} from '../../model/EncounterOption';\r\nimport { EncounterStage } from '../../model/EncounterStage';\r\nimport {\r\n    EncounterActions,\r\n    EncounterRollCall,\r\n    EncounterStageAndOption,\r\n} from '../actions/encounter-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducers: Record<string, Reducer<ActiveEncounter>> = {\r\n    [EncounterActions.START_ENCOUNTER]: startEncounterReducer,\r\n    [EncounterActions.SELECT_ENCOUNTER_OPTION]: selectEncounterOptionReducer,\r\n    [EncounterActions.ACTIVE_ENCOUNTER_ROLL]: activeEncounterRollReducer,\r\n};\r\n\r\nexport function activeEncounterReducer(\r\n    activeEncounter: ActiveEncounter = null,\r\n    action: Action\r\n): ActiveEncounter {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(activeEncounter, action) : activeEncounter;\r\n}\r\n\r\nfunction startEncounterReducer(\r\n    activeEncounter: ActiveEncounter,\r\n    { payload }: PayloadAction<Encounter>\r\n): ActiveEncounter {\r\n    return {\r\n        encounter: payload,\r\n        stage: createEncounterInitStage(payload.initialStageId),\r\n    };\r\n}\r\n\r\nfunction selectEncounterOptionReducer(\r\n    activeEncounter: ActiveEncounter,\r\n    { payload }: PayloadAction<EncounterStageAndOption>\r\n): ActiveEncounter {\r\n    const { stage, option } = payload;\r\n    let newStageState: ActiveEncounterStage;\r\n    if (instanceOfDifficultyCheckOption(option)) {\r\n        newStageState = createEncounterRollStage(stage, option);\r\n    } else {\r\n        console.warn('Unhandled option type:', option.type);\r\n        newStageState = null;\r\n    }\r\n    return {\r\n        ...activeEncounter,\r\n        stage: newStageState,\r\n    };\r\n}\r\n\r\nfunction activeEncounterRollReducer(\r\n    activeEncounter: ActiveEncounter,\r\n    { payload: { dieFaces } }: PayloadAction<EncounterRollCall>\r\n): ActiveEncounter {\r\n    const roll = 1 + Math.floor(Math.random() * dieFaces);\r\n    const stage = activeEncounter.stage as ActiveEncounterRollStage;\r\n    return {\r\n        ...activeEncounter,\r\n        stage: {\r\n            ...stage,\r\n            rolls: [...stage.rolls, roll],\r\n        },\r\n    };\r\n}\r\n\r\nfunction createEncounterInitStage(stageId: number): ActiveEncounterInitStage {\r\n    return {\r\n        id: stageId,\r\n        state: EncounterStageState.INIT,\r\n    };\r\n}\r\n\r\nfunction createEncounterRollStage(\r\n    stage: EncounterStage,\r\n    option: DifficultyCheckOption\r\n): ActiveEncounterRollStage {\r\n    return {\r\n        id: stage.id,\r\n        state: EncounterStageState.ROLL,\r\n        option,\r\n        rolls: [],\r\n    };\r\n}\r\n","import { Action, Reducer } from 'redux';\r\nimport { Encounter } from '../../model/Encounter';\r\nimport { EncounterActions } from '../actions/encounter-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducers: Record<string, Reducer<Record<string, Encounter>>> = {\r\n    [EncounterActions.REGISTER_ENCOUNTER]: registerEncounterReducer,\r\n};\r\n\r\nexport function allEncountersReducer(\r\n    encounters: Record<string, Encounter> = {},\r\n    action: Action\r\n): Record<string, Encounter> {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(encounters, action) : encounters;\r\n}\r\n\r\nfunction registerEncounterReducer(\r\n    encounters: Record<string, Encounter>,\r\n    { payload }: PayloadAction<Encounter>\r\n): Record<string, Encounter> {\r\n    if (encounters[payload.id]) {\r\n        console.warn(`Warning: duplicate encounter registration for ID \"${payload.id}\"`);\r\n    }\r\n    return { ...encounters, [payload.id]: payload };\r\n}\r\n","import { combineReducers } from 'redux';\nimport { EncounterState } from '../store';\nimport { activeEncounterReducer } from './active-encounter-reducer';\nimport { allEncountersReducer } from './all-encounters-reducer';\n\nexport const encounterReducer = combineReducers<EncounterState>({\n    all: allEncountersReducer,\n    active: activeEncounterReducer,\n});\n","import { combineReducers } from 'redux';\nimport { currentSceneReducer } from './reducers/current-scene-reducer';\nimport { encounterReducer } from './reducers/encounter-reducer';\nimport { playerReducer } from './reducers/player-reducer';\nimport { State } from './store';\n\nexport const rootReducer = combineReducers<State>({\n    player: playerReducer,\n    encounter: encounterReducer,\n    currentScene: currentSceneReducer,\n});\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/index';\r\nimport { Scene } from '../enums';\r\nimport { ActiveEncounter } from '../model/ActiveEncounter';\r\nimport { Encounter } from '../model/Encounter';\r\nimport { Player } from '../Player';\r\nimport { rootReducer } from './root-reducer';\r\n\r\nexport interface EncounterState {\r\n    all: Record<string, Encounter>;\r\n    active: ActiveEncounter;\r\n}\r\n\r\nexport interface State {\r\n    player: Player;\r\n    currentScene: Scene;\r\n    encounter: EncounterState;\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n","import { h, render } from 'preact';\nimport { Provider } from 'react-redux';\nimport { ConnectedCombatSandbox1 } from './combat-sandbox-1/CombatSandbox1';\nimport { store } from './combat-sandbox-1/redux/store';\nimport './index.scss';\n\nconst appRoot = document.getElementById('app-root');\n\nrender(\n    <Provider store={store}>\n        <ConnectedCombatSandbox1 />\n    </Provider>,\n    appRoot\n);\n"],"sourceRoot":""}