{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/common/redux/encounter/encounterActions.ts","webpack:///./src/combat-sandbox-1/enums.ts","webpack:///./src/combat-sandbox-1/redux/actions/game-actions.ts","webpack:///./src/common/functions.ts","webpack:///./src/combat-sandbox-1/components/encounter/EncounterSelection.tsx","webpack:///./src/combat-sandbox-1/components/encounter/EncounterStageText.tsx","webpack:///./src/common/model/encounter/EncounterStage.ts","webpack:///./src/common/model/encounter/ActiveEncounter.ts","webpack:///./src/common/model/encounter/EncounterChoice.ts","webpack:///./src/combat-sandbox-1/components/encounter/ChoiceItemList/ChoiceItem.tsx","webpack:///./src/combat-sandbox-1/components/encounter/ChoiceItemList/ChoiceItemList.tsx","webpack:///./src/combat-sandbox-1/components/encounter/choiceTypes/EndEncounterChoiceView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/stageTypes/PickedStateView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/stageTypes/ChoicesStageView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/StageTypeView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/EncounterStageView.tsx","webpack:///./src/combat-sandbox-1/components/encounter/EncounterView.tsx","webpack:///./src/combat-sandbox-1/components/EncounterPanel/EncounterPanel.tsx","webpack:///./src/combat-sandbox-1/redux/actions/player-actions.ts","webpack:///./src/combat-sandbox-1/redux/actions/encounter-actions.ts","webpack:///./src/combat-sandbox-1/redux/reducers/player-reducer.ts","webpack:///./src/combat-sandbox-1/components/PlayerConfigPanel/PlayerConfigPanelInput.tsx","webpack:///./src/combat-sandbox-1/components/PlayerConfigPanel/PlayerConfigPanel.tsx","webpack:///./src/combat-sandbox-1/encounter1.ts","webpack:///./src/combat-sandbox-1/CombatSandbox1.tsx","webpack:///./src/common/redux/encounter/activeEncounterReducer.ts","webpack:///./src/common/redux/encounter/encounterByIdReducer.ts","webpack:///./src/common/redux/encounter/encounterReducer.ts","webpack:///./src/combat-sandbox-1/redux/reducers/current-scene-reducer.ts","webpack:///./src/combat-sandbox-1/redux/root-reducer.ts","webpack:///./src/combat-sandbox-1/redux/store.ts","webpack:///./src/combatSandbox1.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","EncounterAction","Scene","GameActions","noop","args","setScene","scene","type","SET_SCENE","payload","props","super","this","state","selectedEncounter","onSelectChange","onSelectEncounter","encounters","className","htmlFor","id","onChange","map","encounter","disabled","onClick","e","encounterId","currentTarget","find","setState","defaultProps","values","byId","dispatch","START","encounterStart","ENCOUNTER","EncounterStageText","text","EncounterStageType","StageState","instanceOfChoicesStage","stage","CHOICE","ChoiceType","instanceOfEndEncounterChoice","choice","END_ENCOUNTER","EndEncounterChoiceItem","onSelect","fixed","description","Component","getChoiceItem","choices","EndEncounterChoiceView","ownProps","activeEncounter","active","END","ENCOUNTER_END","onContinue","continueText","PickedStateView","InitStateView","onChoiceSelect","ChoicesStageView","SELECT_CHOICE","encounterSelectChoice","StateView","INIT","PICKED","getStateView","stageState","StageTypeView","StageView","EncounterStageView","EncounterView","sceneTitles","ENCOUNTER_SELECT","currentScene","RESET","onReset","renderView","PlayerActions","EncounterActions","setPlayer","player","SET_PLAYER","setStat","statName","SET_PLAYER_STAT","reducerMap","SET_PLAYER_DESCRIPTION","ACTIVE_ENCOUNTER_ROLL","willpowerCost","willpower","PlayerConfigPanelInput","label","maxWillpower","strength","dexterity","constitution","wisdom","intelligence","charisma","setDescription","Number","onPlayerReset","onNameChange","onStrengthChange","onDexterityChange","onConstitutionChange","onWisdomChange","onIntelligenceChange","onCharismaChange","onMaxWillpowerChange","onWillpowerChange","min","max","encounter1","entryStage","stages","load","ConnectedCombatSandbox1","REGISTER","reducers","action","includes","SET_STAGE_STATE","console","warn","encounterReducer","reducer","rootReducer","store","appRoot","document","getElementById"],"mappings":"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","file":"combatSandbox1.a3d9ff9b3c26afa5ef81.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/slimes-the-game/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([46,3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Action } from 'redux';\r\nimport { PayloadAction } from '../../../combat-sandbox-1/redux/redux-utils';\r\nimport { StageState } from '../../model/encounter/ActiveEncounter';\r\nimport { Encounter } from '../../model/encounter/Encounter';\r\nimport { EncounterChoice } from '../../model/encounter/EncounterChoice';\r\n\r\nexport enum EncounterAction {\r\n    REGISTER = 'ENCOUNTER_REGISTER',\r\n    START = 'ENCOUNTER_START',\r\n    RESET = 'ENCOUNTER_RESET',\r\n    SELECT_CHOICE = 'ENCOUNTER_SELECT_CHOICE',\r\n    SET_STAGE_STATE = 'ENCOUNTER_SET_STAGE_STATE',\r\n    END = 'ENCOUNTER_END',\r\n}\r\n\r\nexport function encounterRegister(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterAction.REGISTER, payload: encounter };\r\n}\r\n\r\nexport function encounterStart(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterAction.START, payload: encounter };\r\n}\r\n\r\nexport function encounterReset(): Action {\r\n    return { type: EncounterAction.RESET };\r\n}\r\n\r\nexport function encounterSelectChoice(choice: EncounterChoice): PayloadAction<EncounterChoice> {\r\n    return { type: EncounterAction.SELECT_CHOICE, payload: choice };\r\n}\r\n\r\nexport function setStageState(state: StageState): PayloadAction<StageState> {\r\n    return { type: EncounterAction.SET_STAGE_STATE, payload: state };\r\n}\r\n\r\nexport function encounterEnd(): Action {\r\n    return { type: EncounterAction.END };\r\n}\r\n","export enum Scene {\n    ENCOUNTER_SELECT = 'ENCOUNTER_SELECT',\n    ENCOUNTER = 'ENCOUNTER',\n    ENCOUNTER_END = 'ENCOUNTER_END',\n}\n","import { Scene } from '../../enums';\nimport { PayloadAction } from '../redux-utils';\n\nexport enum GameActions {\n    SET_SCENE = 'SET_SCENE',\n}\n\nexport function setScene(scene: Scene): PayloadAction<Scene> {\n    return { type: GameActions.SET_SCENE, payload: scene };\n}\n","export type Callback<T> = (t: T) => void;\n\nexport function noop(...args: any[]): void {\n    return;\n}\n","import { Component, h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback, noop } from '../../../common/functions';\r\nimport { Encounter } from '../../../common/model/encounter/Encounter';\r\nimport { encounterStart } from '../../../common/redux/encounter/encounterActions';\r\nimport { Scene } from '../../enums';\r\nimport { setScene } from '../../redux/actions/game-actions';\r\nimport { State } from '../../redux/store';\r\nimport './EncounterSelection.scss';\r\nimport TargetedEvent = JSXInternal.TargetedEvent;\r\n\r\nexport interface EncounterSelectionProps {\r\n    encounters: Encounter[];\r\n    onSelectEncounter: Callback<Encounter>;\r\n}\r\n\r\nexport interface EncounterSelectionState {\r\n    selectedEncounter: Encounter;\r\n}\r\n\r\nexport class EncounterSelectionComponent extends Component<\r\n    EncounterSelectionProps,\r\n    EncounterSelectionState\r\n> {\r\n    public static defaultProps: Partial<EncounterSelectionProps> = {\r\n        encounters: [],\r\n        onSelectEncounter: noop,\r\n    };\r\n\r\n    public constructor(props: EncounterSelectionProps) {\r\n        super(props);\r\n        this.state = { selectedEncounter: null };\r\n        this.onSelectChange = this.onSelectChange.bind(this);\r\n        this.onSelectEncounter = this.onSelectEncounter.bind(this);\r\n    }\r\n\r\n    public render({ encounters }: EncounterSelectionProps): VNode {\r\n        return (\r\n            <div className=\"EncounterSelection\">\r\n                <section>\r\n                    <ul className=\"encounter-stats-list\">\r\n                        <li>\r\n                            <span className=\"key\">Encounters Available: </span>\r\n                            <span className=\"value\">{encounters.length}</span>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n                <hr />\r\n                <section className=\"encounter-selection-form\">\r\n                    <label htmlFor=\"encounter-select\">\r\n                        <span>Select Encounter: </span>\r\n                        <select\r\n                            id=\"encounter-select\"\r\n                            value={this.state.selectedEncounter?.id}\r\n                            onChange={this.onSelectChange}\r\n                        >\r\n                            <option value=\"\" />\r\n                            {encounters.map((encounter) => (\r\n                                <option value={encounter.id}>{encounter.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n                    <button\r\n                        className=\"primary\"\r\n                        disabled={!this.state.selectedEncounter}\r\n                        onClick={this.onSelectEncounter}\r\n                    >\r\n                        Start Encounter\r\n                    </button>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSelectChange(e: TargetedEvent<HTMLSelectElement>): void {\r\n        const encounterId = e.currentTarget.value;\r\n        const encounter = this.props.encounters.find((e) => e.id === encounterId) ?? null;\r\n        this.setState({ selectedEncounter: encounter });\r\n    }\r\n\r\n    private onSelectEncounter(): void {\r\n        const { selectedEncounter } = this.state;\r\n        if (selectedEncounter) {\r\n            this.props.onSelectEncounter(selectedEncounter);\r\n        }\r\n    }\r\n}\r\n\r\nexport const EncounterSelection = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EncounterSelectionComponent as any);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterSelectionProps> {\r\n    return {\r\n        encounters: Object.values(state.encounter.byId),\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EncounterSelectionProps> {\r\n    return {\r\n        onSelectEncounter(encounter: Encounter): void {\r\n            dispatch(encounterStart(encounter));\r\n            dispatch(setScene(Scene.ENCOUNTER));\r\n        },\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\n\r\nexport interface EncounterStageTextProps {\r\n    text: string[];\r\n}\r\n\r\nexport const EncounterStageText = ({ text }: EncounterStageTextProps): VNode => {\r\n    return (\r\n        <div className=\"EncounterStageText\">\r\n            {text.map((t) => (\r\n                <p>{t}</p>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n","import { WithId, WithText } from './Encounter';\r\nimport { EncounterChoice } from './EncounterChoice';\r\n\r\nexport enum EncounterStageType {\r\n    CHOICE = 'CHOICE',\r\n}\r\n\r\nexport interface EncounterStageBase extends WithId, WithText {\r\n    type: EncounterStageType;\r\n}\r\n\r\nexport interface ChoicesStage extends EncounterStageBase {\r\n    type: EncounterStageType.CHOICE;\r\n    choices: EncounterChoice[];\r\n}\r\n\r\nexport type EncounterStage = ChoicesStage;\r\n\r\nexport function instanceOfChoicesStage(stage: EncounterStage): stage is ChoicesStage {\r\n    return stage.type === EncounterStageType.CHOICE;\r\n}\r\n","import { Encounter } from './Encounter';\r\nimport { EncounterChoice } from './EncounterChoice';\r\nimport { EncounterStage } from './EncounterStage';\r\n\r\nexport enum StageState {\r\n    INIT = 'INIT',\r\n    PICKED = 'PICKED',\r\n}\r\n\r\nexport interface ActiveEncounter {\r\n    encounter: Encounter;\r\n    stage: EncounterStage;\r\n    stageState: StageState;\r\n    choice?: EncounterChoice;\r\n}\r\n","import { WithText } from './Encounter';\r\n\r\nexport enum ChoiceType {\r\n    END_ENCOUNTER = 'END_ENCOUNTER',\r\n}\r\n\r\nexport interface EncounterChoiceBase extends WithText {\r\n    type: ChoiceType;\r\n    description: string;\r\n}\r\n\r\nexport interface EndEncounterChoice extends EncounterChoiceBase {\r\n    type: ChoiceType.END_ENCOUNTER;\r\n    continueText: string;\r\n}\r\n\r\nexport type EncounterChoice = EndEncounterChoice;\r\n\r\nexport function instanceOfEndEncounterChoice(\r\n    choice: EncounterChoice\r\n): choice is EndEncounterChoice {\r\n    return choice.type === ChoiceType.END_ENCOUNTER;\r\n}\r\n","import classNames from 'classnames';\r\nimport { ComponentType, h, VNode } from 'preact';\r\nimport { useCallback } from 'preact/hooks';\r\nimport { Callback, noop } from '../../../../common/functions';\r\nimport {\r\n    EncounterChoice,\r\n    EndEncounterChoice,\r\n    instanceOfEndEncounterChoice,\r\n} from '../../../../common/model/encounter/EncounterChoice';\r\nimport './ChoiceItem.scss';\r\n\r\nexport interface ChoiceItemProps<C extends EncounterChoice> {\r\n    choice: C;\r\n    onSelect: Callback<C>;\r\n    fixed?: boolean;\r\n}\r\n\r\nconst EndEncounterChoiceItem = ({\r\n    choice,\r\n    onSelect,\r\n    fixed,\r\n}: ChoiceItemProps<EndEncounterChoice>): VNode => {\r\n    const onClick = useCallback(() => onSelect(choice), [choice]);\r\n    return (\r\n        <li\r\n            className={classNames(['ChoiceItem', 'EndEncounterChoiceItem', { fixed: !!fixed }])}\r\n            onClick={onClick}\r\n        >\r\n            {choice.description}\r\n        </li>\r\n    );\r\n};\r\n\r\nexport function getChoiceItem<C extends EncounterChoice>(\r\n    choice: EncounterChoice\r\n): ComponentType<ChoiceItemProps<C>> {\r\n    if (instanceOfEndEncounterChoice(choice)) return EndEncounterChoiceItem;\r\n    return null;\r\n}\r\n\r\nexport const ChoiceItem = (props: ChoiceItemProps<EncounterChoice>): VNode => {\r\n    const { choice, onSelect } = props;\r\n    if (typeof onSelect !== 'function') {\r\n        props.onSelect = noop;\r\n    }\r\n    const Component = getChoiceItem(choice);\r\n    return Component ? <Component {...props} /> : null;\r\n};\r\n","import { h, VNode } from 'preact';\r\nimport { Callback } from '../../../../common/functions';\r\nimport { EncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoiceItem } from './ChoiceItem';\r\nimport './ChoiceItemList.scss';\r\n\r\nexport interface ChoiceItemListProps {\r\n    choices: EncounterChoice[];\r\n    onSelect?: Callback<EncounterChoice>;\r\n    fixed?: boolean;\r\n}\r\n\r\nexport const ChoiceItemList = ({ choices, onSelect, fixed }: ChoiceItemListProps): VNode => (\r\n    <ul className=\"ChoiceItemList\">\r\n        {choices.map((choice) => (\r\n            <ChoiceItem choice={choice} onSelect={onSelect} fixed={fixed} />\r\n        ))}\r\n    </ul>\r\n);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { ActiveEncounter } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport { encounterEnd } from '../../../../common/redux/encounter/encounterActions';\r\nimport { Scene } from '../../../enums';\r\nimport { setScene } from '../../../redux/actions/game-actions';\r\nimport { State } from '../../../redux/store';\r\nimport { ChoiceItemList } from '../ChoiceItemList/ChoiceItemList';\r\n\r\nexport interface EndEncounterChoiceViewWrapperProps {\r\n    stage: ChoicesStage;\r\n}\r\n\r\nexport interface EndEncounterChoiceViewProps extends EndEncounterChoiceViewWrapperProps {\r\n    activeEncounter: ActiveEncounter;\r\n    onContinue: () => void;\r\n}\r\n\r\nconst render = ({ activeEncounter, stage, onContinue }: EndEncounterChoiceViewProps): VNode => (\r\n    <div className=\"EndEncounterChoiceView\">\r\n        <ChoiceItemList choices={[activeEncounter.choice]} fixed />\r\n        {activeEncounter.choice.text.map((t) => (\r\n            <p>{t}</p>\r\n        ))}\r\n        <button className=\"primary\" onClick={onContinue}>\r\n            {activeEncounter.choice.continueText}\r\n        </button>\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(\r\n    state: State,\r\n    ownProps: EndEncounterChoiceViewWrapperProps\r\n): Partial<EndEncounterChoiceViewProps> {\r\n    return { activeEncounter: state.encounter.active, ...ownProps };\r\n}\r\n\r\nfunction mapDispatchToProps(\r\n    dispatch: Dispatch,\r\n    ownProps: EndEncounterChoiceViewWrapperProps\r\n): Partial<EndEncounterChoiceViewProps> {\r\n    return {\r\n        onContinue(): void {\r\n            dispatch(encounterEnd());\r\n            dispatch(setScene(Scene.ENCOUNTER_END));\r\n        },\r\n    };\r\n}\r\n\r\nexport const EndEncounterChoiceView = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { ActiveEncounter } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport { instanceOfEndEncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport { EndEncounterChoiceView } from '../choiceTypes/EndEncounterChoiceView';\r\n\r\nexport interface PickedStateViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n    stage: ChoicesStage;\r\n}\r\n\r\nexport const PickedStateView = ({ activeEncounter, stage }: PickedStateViewProps): VNode => {\r\n    const { choice } = activeEncounter;\r\n    if (instanceOfEndEncounterChoice(choice)) {\r\n        return <EndEncounterChoiceView stage={stage} />;\r\n    }\r\n    return <div>PickedStateView</div>;\r\n};\r\n","import { ComponentType, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback } from '../../../../common/functions';\r\nimport { ActiveEncounter, StageState } from '../../../../common/model/encounter/ActiveEncounter';\r\nimport { EncounterChoice } from '../../../../common/model/encounter/EncounterChoice';\r\nimport { ChoicesStage } from '../../../../common/model/encounter/EncounterStage';\r\nimport { encounterSelectChoice } from '../../../../common/redux/encounter/encounterActions';\r\nimport { State } from '../../../redux/store';\r\nimport { ChoiceItemList } from '../ChoiceItemList/ChoiceItemList';\r\nimport { PickedStateView } from './PickedStateView';\r\n\r\nexport interface ChoicesStageViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n    stage: ChoicesStage;\r\n    onChoiceSelect?: Callback<EncounterChoice>;\r\n}\r\n\r\nconst InitStateView = ({ stage, onChoiceSelect }: ChoicesStageViewProps): VNode => (\r\n    <ChoiceItemList choices={stage.choices} onSelect={onChoiceSelect} />\r\n);\r\n\r\nfunction getStateView(state: StageState): ComponentType<ChoicesStageViewProps> {\r\n    switch (state) {\r\n        case StageState.INIT:\r\n            return InitStateView;\r\n        case StageState.PICKED:\r\n            return PickedStateView;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nconst render = (props: ChoicesStageViewProps) => {\r\n    const { activeEncounter } = props;\r\n    const StateView = getStateView(activeEncounter.stageState);\r\n    return (\r\n        <div className=\"ChoicesStageView\">\r\n            <StateView {...props} />\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction mapStateToProps(state: State): Partial<ChoicesStageViewProps> {\r\n    return { activeEncounter: state.encounter.active };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<ChoicesStageViewProps> {\r\n    return {\r\n        onChoiceSelect(choice: EncounterChoice): void {\r\n            dispatch(encounterSelectChoice(choice));\r\n        },\r\n    };\r\n}\r\n\r\nexport const ChoicesStageView = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import { ComponentType, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { ActiveEncounter } from '../../../common/model/encounter/ActiveEncounter';\r\nimport {\r\n    EncounterStage,\r\n    instanceOfChoicesStage,\r\n} from '../../../common/model/encounter/EncounterStage';\r\nimport { State } from '../../redux/store';\r\nimport { ChoicesStageView } from './stageTypes/ChoicesStageView';\r\n\r\nexport interface StageTypeViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n}\r\n\r\nexport interface StageViewProps<S extends EncounterStage> {\r\n    stage: S;\r\n}\r\n\r\nfunction getStageView<S extends EncounterStage>(\r\n    stage: EncounterStage\r\n): ComponentType<StageViewProps<S>> {\r\n    if (instanceOfChoicesStage(stage)) return ChoicesStageView;\r\n    return null;\r\n}\r\n\r\nconst render = ({ activeEncounter }: StageTypeViewProps): VNode => {\r\n    const StageView = getStageView(activeEncounter.stage);\r\n    return StageView ? <StageView stage={activeEncounter.stage} /> : null;\r\n};\r\n\r\nfunction mapStateToProps(state: State): Partial<StageTypeViewProps> {\r\n    return { activeEncounter: state.encounter.active };\r\n}\r\n\r\nexport const StageTypeView = connect(mapStateToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { ActiveEncounter } from '../../../common/model/encounter/ActiveEncounter';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterStageText } from './EncounterStageText';\r\nimport { StageTypeView } from './StageTypeView';\r\n\r\nexport interface EncounterStageViewProps {\r\n    activeEncounter: ActiveEncounter;\r\n}\r\n\r\nconst render = ({ activeEncounter }: EncounterStageViewProps): VNode => (\r\n    <div className=\"EncounterStageView\">\r\n        <EncounterStageText text={activeEncounter.stage.text} />\r\n        <hr />\r\n        <StageTypeView />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterStageViewProps> {\r\n    return { activeEncounter: state.encounter.active };\r\n}\r\n\r\nexport const EncounterStageView = connect(mapStateToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterStageView } from './EncounterStageView';\r\n\r\nexport interface EncounterViewProps {}\r\n\r\nconst render = (props: EncounterViewProps): VNode => (\r\n    <div className=\"EncounterView\">\r\n        <EncounterStageView />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<EncounterViewProps> {\r\n    return {};\r\n}\r\n\r\nexport const EncounterView = connect(mapStateToProps)(render);\r\n","import { h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { encounterReset } from '../../../common/redux/encounter/encounterActions';\r\nimport { Scene } from '../../enums';\r\nimport { setScene } from '../../redux/actions/game-actions';\r\nimport { State } from '../../redux/store';\r\nimport { EncounterSelection } from '../encounter/EncounterSelection';\r\nimport { EncounterView } from '../encounter/EncounterView';\r\nimport './EncounterPanel.scss';\r\n\r\nconst sceneTitles: Record<Scene, string> = {\r\n    [Scene.ENCOUNTER_SELECT]: 'Encounter Selection',\r\n    [Scene.ENCOUNTER]: 'Encounter Preview',\r\n    [Scene.ENCOUNTER_END]: 'Encounter Complete',\r\n};\r\n\r\nexport interface EncounterPanelProps {\r\n    currentScene: Scene;\r\n    onReset(): void;\r\n}\r\n\r\nconst renderView = (currentScene: Scene, onReset: () => void): VNode => {\r\n    switch (currentScene) {\r\n        case Scene.ENCOUNTER_SELECT:\r\n            return <EncounterSelection />;\r\n        case Scene.ENCOUNTER:\r\n            return <EncounterView />;\r\n        case Scene.ENCOUNTER_END:\r\n            return (\r\n                <div>\r\n                    <p>Congratulations! You finished the encounter!</p>\r\n                    <button className=\"primary\" onClick={onReset}>\r\n                        Start again?\r\n                    </button>\r\n                </div>\r\n            );\r\n        default:\r\n            return null;\r\n    }\r\n};\r\n\r\nexport const EncounterPanel = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(\r\n    ({ currentScene, onReset }: EncounterPanelProps): VNode => {\r\n        return (\r\n            <div className=\"EncounterPanel\">\r\n                <h3 className=\"header-with-buttons\">\r\n                    <span>{sceneTitles[currentScene]}</span>\r\n                    <button onClick={onReset} disabled={currentScene === Scene.ENCOUNTER_SELECT}>\r\n                        Reset\r\n                    </button>\r\n                </h3>\r\n                {renderView(currentScene, onReset)}\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\nfunction mapStateToProps({ currentScene }: State): Partial<EncounterPanelProps> {\r\n    return { currentScene };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<EncounterPanelProps> {\r\n    return {\r\n        onReset() {\r\n            dispatch(encounterReset());\r\n            dispatch(setScene(Scene.ENCOUNTER_SELECT));\r\n        },\r\n    };\r\n}\r\n","import { Player, PlayerDescription, PlayerStats } from '../../Player';\nimport { PayloadAction } from '../redux-utils';\n\nexport enum PlayerActions {\n    SET_PLAYER = 'SET_PLAYER',\n    SET_PLAYER_DESCRIPTION = 'SET_PLAYER_DESCRIPTION',\n    SET_PLAYER_STAT = 'SET_PLAYER_STAT',\n}\n\nexport interface PlayerStatUpdate {\n    statName: keyof PlayerStats;\n    value: number;\n}\n\nexport interface PlayerDescriptionUpdate {\n    key: keyof PlayerDescription;\n    value: string;\n}\n\nexport function setPlayer(player: Player): PayloadAction<Player> {\n    return { type: PlayerActions.SET_PLAYER, payload: player };\n}\n\nexport function setDescription(\n    key: keyof PlayerDescription,\n    value: string\n): PayloadAction<PlayerDescriptionUpdate> {\n    return {\n        type: PlayerActions.SET_PLAYER_DESCRIPTION,\n        payload: { key, value },\n    };\n}\n\nexport function setStat(\n    statName: keyof PlayerStats,\n    value: number\n): PayloadAction<PlayerStatUpdate> {\n    return {\n        type: PlayerActions.SET_PLAYER_STAT,\n        payload: { statName, value },\n    };\n}\n","import { Encounter } from '../../model/Encounter';\r\nimport { EncounterOption } from '../../model/EncounterOption';\r\nimport { OptionsEncounterStage } from '../../model/EncounterStage';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nexport interface EncounterStageAndOption {\r\n    stage: OptionsEncounterStage;\r\n    option: EncounterOption;\r\n}\r\n\r\nexport interface EncounterRollCall {\r\n    dieFaces: number;\r\n    willpowerCost: number;\r\n}\r\n\r\nexport enum EncounterActions {\r\n    REGISTER_ENCOUNTER = 'REGISTER_ENCOUNTER',\r\n    START_ENCOUNTER = 'START_ENCOUNTER',\r\n    SELECT_ENCOUNTER_OPTION = 'SELECT_ENCOUNTER_OPTION',\r\n    ACTIVE_ENCOUNTER_ROLL = 'ACTIVE_ENCOUNTER_ROLL',\r\n    SET_ENCOUNTER_STAGE = 'SET_ENCOUNTER_STAGE',\r\n}\r\n\r\nexport function registerEncounter(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterActions.REGISTER_ENCOUNTER, payload: encounter };\r\n}\r\n\r\nexport function startEncounter(encounter: Encounter): PayloadAction<Encounter> {\r\n    return { type: EncounterActions.START_ENCOUNTER, payload: encounter };\r\n}\r\n\r\nexport function selectEncounterOption(\r\n    stage: OptionsEncounterStage,\r\n    option: EncounterOption\r\n): PayloadAction<EncounterStageAndOption> {\r\n    return { type: EncounterActions.SELECT_ENCOUNTER_OPTION, payload: { stage, option } };\r\n}\r\n\r\nexport function activeEncounterRoll(\r\n    dieFaces: number,\r\n    willpowerCost: number\r\n): PayloadAction<EncounterRollCall> {\r\n    return { type: EncounterActions.ACTIVE_ENCOUNTER_ROLL, payload: { dieFaces, willpowerCost } };\r\n}\r\n","import { Action, Reducer } from 'redux';\r\nimport { Player } from '../../Player';\r\nimport { EncounterActions, EncounterRollCall } from '../actions/encounter-actions';\r\nimport {\r\n    PlayerActions,\r\n    PlayerDescriptionUpdate,\r\n    PlayerStatUpdate,\r\n} from '../actions/player-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducerMap: Record<string, Reducer<Player>> = {\r\n    [PlayerActions.SET_PLAYER]: setPlayerReducer,\r\n    [PlayerActions.SET_PLAYER_DESCRIPTION]: setPlayerDescriptionReducer,\r\n    [PlayerActions.SET_PLAYER_STAT]: setPlayerStatReducer,\r\n    [EncounterActions.ACTIVE_ENCOUNTER_ROLL]: activeEncounterRollReducer,\r\n};\r\n\r\nexport function playerReducer(player = defaultPlayer(), action: Action): Player {\r\n    const reducer = reducerMap[action.type];\r\n    return reducer ? reducer(player, action) : player;\r\n}\r\n\r\nexport function defaultPlayer(): Player {\r\n    return {\r\n        name: 'Heroine',\r\n        maxWillpower: 10,\r\n        willpower: 10,\r\n        strength: 2,\r\n        dexterity: 2,\r\n        constitution: 2,\r\n        wisdom: 2,\r\n        intelligence: 2,\r\n        charisma: 2,\r\n    };\r\n}\r\n\r\nfunction setPlayerReducer(player: Player, { payload }: PayloadAction<Player>): Player {\r\n    if (payload === player) {\r\n        return player;\r\n    }\r\n    return { ...payload };\r\n}\r\n\r\nfunction setPlayerDescriptionReducer(\r\n    player: Player,\r\n    { payload: { key, value } }: PayloadAction<PlayerDescriptionUpdate>\r\n): Player {\r\n    if (player[key] === value) {\r\n        return player;\r\n    }\r\n    return { ...player, [key]: value };\r\n}\r\n\r\nfunction setPlayerStatReducer(\r\n    player: Player,\r\n    { payload: { statName, value } }: PayloadAction<PlayerStatUpdate>\r\n): Player {\r\n    if (player[statName] === value) {\r\n        return player;\r\n    }\r\n    return { ...player, [statName]: value };\r\n}\r\n\r\nfunction activeEncounterRollReducer(\r\n    player: Player,\r\n    { payload: { willpowerCost } }: PayloadAction<EncounterRollCall>\r\n): Player {\r\n    if (!willpowerCost) {\r\n        return player;\r\n    }\r\n    return {\r\n        ...player,\r\n        willpower: player.willpower - willpowerCost,\r\n    };\r\n}\r\n","import { h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport HTMLAttributes = JSXInternal.HTMLAttributes;\r\n\r\nexport interface PlayerConfigPanelInputProps<T> extends HTMLAttributes<HTMLInputElement> {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport const PlayerConfigPanelInput = <T extends unknown>(\r\n    props: PlayerConfigPanelInputProps<T>\r\n): VNode => (\r\n    <label htmlFor={props.id}>\r\n        <span>{props.label}:</span>\r\n        <input {...props} />\r\n    </label>\r\n);\r\n","import { h, VNode } from 'preact';\r\nimport { JSXInternal } from 'preact/src/jsx';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { Callback } from '../../../common/functions';\r\nimport { Player } from '../../Player';\r\nimport { setDescription, setPlayer, setStat } from '../../redux/actions/player-actions';\r\nimport { defaultPlayer } from '../../redux/reducers/player-reducer';\r\nimport { State } from '../../redux/store';\r\nimport './PlayerConfigPanel.scss';\r\nimport { PlayerConfigPanelInput } from './PlayerConfigPanelInput';\r\nimport TargetedEvent = JSXInternal.TargetedEvent;\r\n\r\nexport interface PlayerConfigPanelProps {\r\n    player: Player;\r\n    onPlayerReset: () => void;\r\n    onNameChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onStrengthChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onDexterityChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onConstitutionChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onWisdomChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onIntelligenceChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onCharismaChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onMaxWillpowerChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n    onWillpowerChange: Callback<TargetedEvent<HTMLInputElement>>;\r\n}\r\n\r\nconst render = ({\r\n    player,\r\n    onPlayerReset,\r\n    onNameChange,\r\n    onStrengthChange,\r\n    onDexterityChange,\r\n    onConstitutionChange,\r\n    onWisdomChange,\r\n    onIntelligenceChange,\r\n    onCharismaChange,\r\n    onMaxWillpowerChange,\r\n    onWillpowerChange,\r\n}: PlayerConfigPanelProps): VNode => (\r\n    <div className=\"PlayerConfigPanel\">\r\n        <h3 className=\"header-with-buttons\">\r\n            <span>Player</span>\r\n            <button onClick={onPlayerReset}>Reset</button>\r\n        </h3>\r\n        <PlayerConfigPanelInput\r\n            id=\"name-input\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            value={player.name}\r\n            onChange={onNameChange}\r\n        />\r\n        <h4>Attributes</h4>\r\n        <div className=\"attribute-config\">\r\n            <PlayerConfigPanelInput\r\n                id=\"strength-input\"\r\n                label=\"Strength\"\r\n                type=\"number\"\r\n                value={player.strength}\r\n                min={1}\r\n                onChange={onStrengthChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"dexterity-input\"\r\n                label=\"Dexterity\"\r\n                type=\"number\"\r\n                value={player.dexterity}\r\n                min={1}\r\n                onChange={onDexterityChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"constitution-input\"\r\n                label=\"Constitution\"\r\n                type=\"number\"\r\n                value={player.constitution}\r\n                min={1}\r\n                onChange={onConstitutionChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"wisdom-input\"\r\n                label=\"Wisdom\"\r\n                type=\"number\"\r\n                value={player.wisdom}\r\n                min={1}\r\n                onChange={onWisdomChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"intelligence-input\"\r\n                label=\"Intelligence\"\r\n                type=\"number\"\r\n                value={player.intelligence}\r\n                min={1}\r\n                onChange={onIntelligenceChange}\r\n            />\r\n            <PlayerConfigPanelInput\r\n                id=\"charisma-input\"\r\n                label=\"Charisma\"\r\n                type=\"number\"\r\n                value={player.charisma}\r\n                min={1}\r\n                onChange={onCharismaChange}\r\n            />\r\n        </div>\r\n        <hr />\r\n        <h4>Resources</h4>\r\n        <PlayerConfigPanelInput\r\n            id=\"max-willpower-input\"\r\n            label=\"Max Willpower\"\r\n            type=\"number\"\r\n            value={player.maxWillpower}\r\n            min={1}\r\n            onChange={onMaxWillpowerChange}\r\n        />\r\n        <PlayerConfigPanelInput\r\n            id=\"willpower-input\"\r\n            label=\"Willpower\"\r\n            type=\"number\"\r\n            value={player.willpower}\r\n            min={0}\r\n            max={player.maxWillpower}\r\n            onChange={onWillpowerChange}\r\n        />\r\n    </div>\r\n);\r\n\r\nfunction mapStateToProps(state: State): Partial<PlayerConfigPanelProps> {\r\n    return {\r\n        player: state.player,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<PlayerConfigPanelProps> {\r\n    return {\r\n        onPlayerReset(): void {\r\n            dispatch(setPlayer(defaultPlayer()));\r\n        },\r\n        onNameChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = e.currentTarget.value;\r\n            dispatch(setDescription('name', value));\r\n        },\r\n        onStrengthChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('strength', value));\r\n        },\r\n        onDexterityChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('dexterity', value));\r\n        },\r\n        onConstitutionChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('constitution', value));\r\n        },\r\n        onWisdomChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('wisdom', value));\r\n        },\r\n        onIntelligenceChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('intelligence', value));\r\n        },\r\n        onCharismaChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('charisma', value));\r\n        },\r\n        onMaxWillpowerChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('maxWillpower', value));\r\n        },\r\n        onWillpowerChange(e: TargetedEvent<HTMLInputElement>): void {\r\n            const value = Number(e.currentTarget.value);\r\n            dispatch(setStat('willpower', value));\r\n        },\r\n    };\r\n}\r\n\r\nexport const PlayerConfigPanel = connect(mapStateToProps, mapDispatchToProps)(render);\r\n","import { Encounter } from '../common/model/encounter/Encounter';\r\nimport { ChoiceType } from '../common/model/encounter/EncounterChoice';\r\nimport { EncounterStageType } from '../common/model/encounter/EncounterStage';\r\n\r\nexport const encounter1: Encounter = {\r\n    id: '0d895b71-0029-4e82-9a20-ce883e891660',\r\n    name: 'An Old Chest',\r\n    entryStage: 'c0704d17-9746-489b-a3eb-a8cfc5b4bc76',\r\n    stages: [\r\n        {\r\n            id: 'c0704d17-9746-489b-a3eb-a8cfc5b4bc76',\r\n            type: EncounterStageType.CHOICE,\r\n            text: ['You see an old chest. It appears to be locked.', 'What do you do?'],\r\n            choices: [\r\n                {\r\n                    type: ChoiceType.END_ENCOUNTER,\r\n                    description: 'Ignore the chest',\r\n                    text: ['You ignore the chest and move on'],\r\n                    continueText: 'Continue',\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n};\r\n","import { Component, h, VNode } from 'preact';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { noop } from '../common/functions';\r\nimport { encounterRegister } from '../common/redux/encounter/encounterActions';\r\nimport './CombatSandbox1.scss';\r\nimport { EncounterPanel } from './components/EncounterPanel/EncounterPanel';\r\nimport { PlayerConfigPanel } from './components/PlayerConfigPanel/PlayerConfigPanel';\r\nimport { encounter1 } from './encounter1';\r\nimport { Scene } from './enums';\r\nimport { Player } from './Player';\r\nimport { setScene } from './redux/actions/game-actions';\r\nimport { setPlayer } from './redux/actions/player-actions';\r\nimport { defaultPlayer } from './redux/reducers/player-reducer';\r\nimport { State } from './redux/store';\r\n\r\nexport interface CombatSandbox1Props {\r\n    player: Player;\r\n    load: () => void;\r\n}\r\n\r\nexport class CombatSandbox1 extends Component<CombatSandbox1Props> {\r\n    public static defaultProps?: Pick<CombatSandbox1Props, any> = {\r\n        load: noop,\r\n    };\r\n\r\n    public constructor(props: CombatSandbox1Props) {\r\n        super(props);\r\n        props.load();\r\n    }\r\n\r\n    public render({ player }: CombatSandbox1Props): VNode {\r\n        return (\r\n            <div className=\"CombatSandbox1\">\r\n                <div className=\"config-panel\">\r\n                    <div className=\"panel-header\">\r\n                        <h2>Configuration</h2>\r\n                    </div>\r\n                    <PlayerConfigPanel />\r\n                </div>\r\n                <div className=\"encounter-panel\">\r\n                    <div className=\"panel-header\">\r\n                        <h2>Encounter</h2>\r\n                    </div>\r\n                    <EncounterPanel />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: State): Partial<CombatSandbox1Props> {\r\n    return {\r\n        player: state.player,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch): Partial<CombatSandbox1Props> {\r\n    return {\r\n        load(): void {\r\n            dispatch(encounterRegister(encounter1));\r\n            dispatch(setPlayer(defaultPlayer()));\r\n            dispatch(setScene(Scene.ENCOUNTER_SELECT));\r\n        },\r\n    };\r\n}\r\n\r\nexport const ConnectedCombatSandbox1 = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CombatSandbox1 as any);\r\n","import { Action, Reducer } from 'redux';\r\nimport { PayloadAction } from '../../../combat-sandbox-1/redux/redux-utils';\r\nimport { ActiveEncounter, StageState } from '../../model/encounter/ActiveEncounter';\r\nimport { Encounter } from '../../model/encounter/Encounter';\r\nimport { EncounterChoice } from '../../model/encounter/EncounterChoice';\r\nimport { instanceOfChoicesStage } from '../../model/encounter/EncounterStage';\r\nimport { EncounterAction } from './encounterActions';\r\n\r\nfunction defaultActiveEncounter(): ActiveEncounter {\r\n    return { encounter: null, stage: null, stageState: null };\r\n}\r\n\r\nconst reducers: Record<string, Reducer<ActiveEncounter>> = {\r\n    [EncounterAction.START]: encounterStartReducer,\r\n    [EncounterAction.RESET]: encounterResetReducer,\r\n    [EncounterAction.SELECT_CHOICE]: encounterSelectChoiceReducer,\r\n    [EncounterAction.SET_STAGE_STATE]: encounterSetStageStateReducer,\r\n};\r\n\r\nexport function activeEncounterReducer(\r\n    state: ActiveEncounter = defaultActiveEncounter(),\r\n    action: Action\r\n): ActiveEncounter {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(state, action) : state;\r\n}\r\n\r\nfunction encounterStartReducer(\r\n    state: ActiveEncounter,\r\n    action: PayloadAction<Encounter>\r\n): ActiveEncounter {\r\n    const encounter = action.payload;\r\n    if (encounter) {\r\n        const stage = encounter.stages.find((s) => s.id === encounter.entryStage);\r\n        if (stage) {\r\n            return { encounter, stage, stageState: StageState.INIT };\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction encounterResetReducer(): ActiveEncounter {\r\n    return defaultActiveEncounter();\r\n}\r\n\r\nfunction encounterSelectChoiceReducer(\r\n    state: ActiveEncounter,\r\n    { payload }: PayloadAction<EncounterChoice>\r\n): ActiveEncounter {\r\n    if (\r\n        state.stageState !== StageState.INIT ||\r\n        !payload ||\r\n        !instanceOfChoicesStage(state.stage) ||\r\n        !state.stage.choices.includes(payload)\r\n    ) {\r\n        return state;\r\n    }\r\n    return { ...state, stageState: StageState.PICKED, choice: payload };\r\n}\r\n\r\nfunction encounterSetStageStateReducer(\r\n    state: ActiveEncounter,\r\n    { payload }: PayloadAction<StageState>\r\n): ActiveEncounter {\r\n    if (payload !== state.stageState) {\r\n        return { ...state, stageState: payload };\r\n    }\r\n    return state;\r\n}\r\n","import { Action, Reducer } from 'redux';\r\nimport { PayloadAction } from '../../../combat-sandbox-1/redux/redux-utils';\r\nimport { Encounter } from '../../model/encounter/Encounter';\r\nimport { EncounterAction } from './encounterActions';\r\n\r\nconst reducers: Record<string, Reducer<Record<string, Encounter>>> = {\r\n    [EncounterAction.REGISTER]: encounterRegisterReducer,\r\n};\r\n\r\nexport function encounterByIdReducer(\r\n    state: Record<string, Encounter> = {},\r\n    action: Action\r\n): Record<string, Encounter> {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(state, action) : state;\r\n}\r\n\r\nfunction encounterRegisterReducer(\r\n    state: Record<string, Encounter>,\r\n    action: PayloadAction<Encounter>\r\n): Record<string, Encounter> {\r\n    const encounter = action.payload;\r\n\r\n    if (!encounter) {\r\n        return state;\r\n    }\r\n\r\n    if (state[encounter.id]) {\r\n        console.warn(`Duplicate encounter ID registered: ${encounter.id}`);\r\n    }\r\n\r\n    return { ...state, [encounter.id]: encounter };\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { activeEncounterReducer } from './activeEncounterReducer';\r\nimport { encounterByIdReducer } from './encounterByIdReducer';\r\nimport { EncounterState } from './encounterState';\r\n\r\nexport const encounterReducer = combineReducers<EncounterState>({\r\n    byId: encounterByIdReducer,\r\n    active: activeEncounterReducer,\r\n});\r\n","import { Action, Reducer } from 'redux';\r\nimport { Scene } from '../../enums';\r\nimport { GameActions } from '../actions/game-actions';\r\nimport { PayloadAction } from '../redux-utils';\r\n\r\nconst reducers: Record<string, Reducer<Scene>> = {\r\n    [GameActions.SET_SCENE]: setSceneReducer,\r\n};\r\n\r\nexport function currentSceneReducer(currentScene = Scene.ENCOUNTER_SELECT, action: Action): Scene {\r\n    const reducer = reducers[action.type];\r\n    return reducer ? reducer(currentScene, action) : currentScene;\r\n}\r\n\r\nfunction setSceneReducer(currentScene: Scene, { payload }: PayloadAction<Scene>): Scene {\r\n    return payload;\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { encounterReducer } from '../../common/redux/encounter/encounterReducer';\r\nimport { currentSceneReducer } from './reducers/current-scene-reducer';\r\nimport { playerReducer } from './reducers/player-reducer';\r\nimport { State } from './store';\r\n\r\nexport const rootReducer = combineReducers<State>({\r\n    player: playerReducer,\r\n    encounter: encounterReducer,\r\n    currentScene: currentSceneReducer,\r\n});\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/index';\r\nimport { EncounterState } from '../../common/redux/encounter/encounterState';\r\nimport { Scene } from '../enums';\r\nimport { ActiveEncounter } from '../model/ActiveEncounter';\r\nimport { Encounter } from '../model/Encounter';\r\nimport { Player } from '../Player';\r\nimport { rootReducer } from './root-reducer';\r\n\r\nexport interface OldEncounterState {\r\n    all: Record<string, Encounter>;\r\n    active: ActiveEncounter;\r\n}\r\n\r\nexport interface State {\r\n    player: Player;\r\n    currentScene: Scene;\r\n    encounter: EncounterState;\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools());\r\n","import { h, render } from 'preact';\nimport { Provider } from 'react-redux';\nimport { ConnectedCombatSandbox1 } from './combat-sandbox-1/CombatSandbox1';\nimport { store } from './combat-sandbox-1/redux/store';\nimport './index.scss';\n\nconst appRoot = document.getElementById('app-root');\n\nrender(\n    <Provider store={store}>\n        <ConnectedCombatSandbox1 />\n    </Provider>,\n    appRoot\n);\n"],"sourceRoot":""}